{"ast":null,"code":"/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create() {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return new this(...args);\n  }\n\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n}\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor() {\n    let words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 4;\n    super();\n    let typedArray = words;\n    // Convert buffers to uint8\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    // Convert other array views to uint8\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    // Handle Uint8Array\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength;\n\n      // Extract bytes\n      const _words = [];\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      }\n\n      // Initialize this word array\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  static random(nBytes) {\n    const words = [];\n    const r = m_w => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n      return () => {\n        _m_z = 0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10) & mask;\n        _m_w = 0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10) & mask;\n        let result = (_m_z << 0x10) + _m_w & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n      rcache = _r() * 0x3ade67b7;\n      words.push(_r() * 0x100000000 | 0);\n    }\n    return new WordArray(words, nBytes);\n  }\n\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  toString() {\n    let encoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Hex;\n    return encoder.stringify(this);\n  }\n\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes;\n\n    // Clamp excess bits\n    this.clamp();\n\n    // Concat\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n      }\n    }\n    this.sigBytes += thatSigBytes;\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n  clamp() {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = this;\n\n    // Clamp\n    words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n    words.length = Math.ceil(sigBytes / 4);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n    return clone;\n  }\n}\n\n/**\n * Hex encoding strategy.\n */\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n    return hexChars.join('');\n  },\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n    }\n    return new WordArray(words, hexStrLength / 2);\n  }\n};\n\n/**\n * Latin1 encoding strategy.\n */\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n\n    // Convert\n    const latin1Chars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n    return latin1Chars.join('');\n  },\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n    }\n    return new WordArray(words, latin1StrLength);\n  }\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n  _append(data) {\n    let m_data = data;\n\n    // Convert string to WordArray, else assume WordArray already\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    }\n\n    // Append\n    this._data.concat(m_data);\n    this._nDataBytes += m_data.sigBytes;\n  }\n\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n  _process(doFlush) {\n    let processedWords;\n\n    // Shortcuts\n    const {\n      _data: data,\n      blockSize\n    } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count blocks ready\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n\n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n\n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n    // Process blocks\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      }\n\n      // Remove processed words\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    }\n\n    // Return processed words\n    return new WordArray(processedWords, nBytesReady);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n    return clone;\n  }\n}\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n    this.blockSize = 512 / 32;\n\n    /**\n     * Configuration options.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate);\n\n    // Update the hash\n    this._process();\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n\n    // Perform concrete-hasher logic\n    const hash = this._doFinalize();\n    return hash;\n  }\n}\n\n/**\n * HMAC algorithm.\n */\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n    const hasher = new SubHasher();\n    this._hasher = hasher;\n\n    // Convert string to WordArray, else assume WordArray already\n    let _key = key;\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    }\n\n    // Shortcuts\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n\n    // Allow arbitrary length keys\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    }\n\n    // Clamp excess bits\n    _key.clamp();\n\n    // Clone key for inner and outer pads\n    const oKey = _key.clone();\n    this._oKey = oKey;\n    const iKey = _key.clone();\n    this._iKey = iKey;\n\n    // Shortcuts\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n\n    // XOR keys with pad constants\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n  reset() {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Reset\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate);\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Compute HMAC\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n    return hmac;\n  }\n}","map":{"version":3,"names":["Base","create","_len","arguments","length","args","Array","_key2","mixIn","properties","Object","assign","clone","constructor","WordArray","words","undefined","sigBytes","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","random","nBytes","r","m_w","_m_w","_m_z","mask","result","Math","rcache","_r","push","toString","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","call","slice","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","_minBufferSize","reset","_data","_nDataBytes","_append","data","m_data","_process","doFlush","processedWords","blockSize","dataWords","dataSigBytes","blockSizeBytes","nBlocksReady","max","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Hasher","cfg","_createHelper","SubHasher","message","finalize","_createHmacHelper","key","HMAC","_doReset","update","messageUpdate","hash","_doFinalize","hasher","_hasher","_key","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/node_modules/crypto-es/lib/core.js"],"sourcesContent":["/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n}\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n\n    let typedArray = words;\n    // Convert buffers to uint8\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    // Convert other array views to uint8\n    if (\n      typedArray instanceof Int8Array\n      || typedArray instanceof Uint8ClampedArray\n      || typedArray instanceof Int16Array\n      || typedArray instanceof Uint16Array\n      || typedArray instanceof Int32Array\n      || typedArray instanceof Uint32Array\n      || typedArray instanceof Float32Array\n      || typedArray instanceof Float64Array\n    ) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    // Handle Uint8Array\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength;\n\n      // Extract bytes\n      const _words = [];\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n      }\n\n      // Initialize this word array\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  static random(nBytes) {\n    const words = [];\n\n    const r = (m_w) => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n\n      return () => {\n        _m_z = (0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10)) & mask;\n        _m_w = (0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10)) & mask;\n        let result = ((_m_z << 0x10) + _m_w) & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push((_r() * 0x100000000) | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes;\n\n    // Clamp excess bits\n    this.clamp();\n\n    // Concat\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n      }\n    }\n    this.sigBytes += thatSigBytes;\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n  clamp() {\n    // Shortcuts\n    const { words, sigBytes } = this;\n\n    // Clamp\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n    words.length = Math.ceil(sigBytes / 4);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n\n    return clone;\n  }\n}\n\n/**\n * Hex encoding strategy.\n */\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  },\n};\n\n/**\n * Latin1 encoding strategy.\n */\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const latin1Chars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n\n    return new WordArray(words, latin1StrLength);\n  },\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  },\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n  _append(data) {\n    let m_data = data;\n\n    // Convert string to WordArray, else assume WordArray already\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    }\n\n    // Append\n    this._data.concat(m_data);\n    this._nDataBytes += m_data.sigBytes;\n  }\n\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n  _process(doFlush) {\n    let processedWords;\n\n    // Shortcuts\n    const { _data: data, blockSize } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count blocks ready\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n\n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n\n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n    // Process blocks\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      }\n\n      // Remove processed words\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    }\n\n    // Return processed words\n    return new WordArray(processedWords, nBytesReady);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n\n    this.blockSize = 512 / 32;\n\n    /**\n     * Configuration options.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate);\n\n    // Update the hash\n    this._process();\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n\n    // Perform concrete-hasher logic\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n}\n\n/**\n * HMAC algorithm.\n */\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n\n    const hasher = new SubHasher();\n    this._hasher = hasher;\n\n    // Convert string to WordArray, else assume WordArray already\n    let _key = key;\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    }\n\n    // Shortcuts\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n\n    // Allow arbitrary length keys\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    }\n\n    // Clamp excess bits\n    _key.clamp();\n\n    // Clone key for inner and outer pads\n    const oKey = _key.clone();\n    this._oKey = oKey;\n    const iKey = _key.clone();\n    this._iKey = iKey;\n\n    // Shortcuts\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n\n    // XOR keys with pad constants\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n  reset() {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Reset\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate);\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Compute HMAC\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n    return hmac;\n  }\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,IAAI,CAAC;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,MAAMA,CAAA,EAAU;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,KAAA,MAAAA,KAAA,GAAAL,IAAA,EAAAK,KAAA;MAAJF,IAAI,CAAAE,KAAA,IAAAJ,SAAA,CAAAI,KAAA;IAAA;IACnB,OAAO,IAAI,IAAI,CAAC,GAAGF,IAAI,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,KAAKA,CAACC,UAAU,EAAE;IAChB,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,UAAU,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,KAAKA,CAAA,EAAG;IACN,MAAMA,KAAK,GAAG,IAAI,IAAI,CAACC,WAAW,EAAE;IACpCH,MAAM,CAACC,MAAM,CAACC,KAAK,EAAE,IAAI,CAAC;IAC1B,OAAOA,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,SAAS,SAASd,IAAI,CAAC;EAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,WAAWA,CAAA,EAA0C;IAAA,IAAzCE,KAAK,GAAAZ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAG,EAAE;IAAA,IAAEc,QAAQ,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAGY,KAAK,CAACX,MAAM,GAAG,CAAC;IACjD,KAAK,EAAE;IAEP,IAAIc,UAAU,GAAGH,KAAK;IACtB;IACA,IAAIG,UAAU,YAAYC,WAAW,EAAE;MACrCD,UAAU,GAAG,IAAIE,UAAU,CAACF,UAAU,CAAC;IACzC;;IAEA;IACA,IACEA,UAAU,YAAYG,SAAS,IAC5BH,UAAU,YAAYI,iBAAiB,IACvCJ,UAAU,YAAYK,UAAU,IAChCL,UAAU,YAAYM,WAAW,IACjCN,UAAU,YAAYO,UAAU,IAChCP,UAAU,YAAYQ,WAAW,IACjCR,UAAU,YAAYS,YAAY,IAClCT,UAAU,YAAYU,YAAY,EACrC;MACAV,UAAU,GAAG,IAAIE,UAAU,CAACF,UAAU,CAACW,MAAM,EAAEX,UAAU,CAACY,UAAU,EAAEZ,UAAU,CAACa,UAAU,CAAC;IAC9F;;IAEA;IACA,IAAIb,UAAU,YAAYE,UAAU,EAAE;MACpC;MACA,MAAMY,oBAAoB,GAAGd,UAAU,CAACa,UAAU;;MAElD;MACA,MAAME,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,oBAAoB,EAAEE,CAAC,IAAI,CAAC,EAAE;QAChDD,MAAM,CAACC,CAAC,KAAK,CAAC,CAAC,IAAIhB,UAAU,CAACgB,CAAC,CAAC,IAAK,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE;MACxD;;MAEA;MACA,IAAI,CAACnB,KAAK,GAAGkB,MAAM;MACnB,IAAI,CAAChB,QAAQ,GAAGe,oBAAoB;IACtC,CAAC,MAAM;MACL;MACA,IAAI,CAACjB,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IAC1B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOkB,MAAMA,CAACC,MAAM,EAAE;IACpB,MAAMrB,KAAK,GAAG,EAAE;IAEhB,MAAMsB,CAAC,GAAIC,GAAG,IAAK;MACjB,IAAIC,IAAI,GAAGD,GAAG;MACd,IAAIE,IAAI,GAAG,UAAU;MACrB,MAAMC,IAAI,GAAG,UAAU;MAEvB,OAAO,MAAM;QACXD,IAAI,GAAI,MAAM,IAAIA,IAAI,GAAG,MAAM,CAAC,IAAIA,IAAI,IAAI,IAAI,CAAC,GAAIC,IAAI;QACzDF,IAAI,GAAI,MAAM,IAAIA,IAAI,GAAG,MAAM,CAAC,IAAIA,IAAI,IAAI,IAAI,CAAC,GAAIE,IAAI;QACzD,IAAIC,MAAM,GAAI,CAACF,IAAI,IAAI,IAAI,IAAID,IAAI,GAAIE,IAAI;QAC3CC,MAAM,IAAI,WAAW;QACrBA,MAAM,IAAI,GAAG;QACb,OAAOA,MAAM,IAAIC,IAAI,CAACR,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAChD,CAAC;IACH,CAAC;IAED,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEU,MAAM,EAAEV,CAAC,GAAGE,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;MAC1C,MAAMW,EAAE,GAAGR,CAAC,CAAC,CAACO,MAAM,IAAID,IAAI,CAACR,MAAM,EAAE,IAAI,WAAW,CAAC;MAErDS,MAAM,GAAGC,EAAE,EAAE,GAAG,UAAU;MAC1B9B,KAAK,CAAC+B,IAAI,CAAED,EAAE,EAAE,GAAG,WAAW,GAAI,CAAC,CAAC;IACtC;IAEA,OAAO,IAAI/B,SAAS,CAACC,KAAK,EAAEqB,MAAM,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,QAAQA,CAAA,EAAgB;IAAA,IAAfC,OAAO,GAAA7C,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAG8C,GAAG;IACpB,OAAOD,OAAO,CAACE,SAAS,CAAC,IAAI,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,SAAS,EAAE;IAChB;IACA,MAAMC,SAAS,GAAG,IAAI,CAACtC,KAAK;IAC5B,MAAMuC,SAAS,GAAGF,SAAS,CAACrC,KAAK;IACjC,MAAMwC,YAAY,GAAG,IAAI,CAACtC,QAAQ;IAClC,MAAMuC,YAAY,GAAGJ,SAAS,CAACnC,QAAQ;;IAEvC;IACA,IAAI,CAACwC,KAAK,EAAE;;IAEZ;IACA,IAAIF,YAAY,GAAG,CAAC,EAAE;MACpB;MACA,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,YAAY,EAAEtB,CAAC,IAAI,CAAC,EAAE;QACxC,MAAMwB,QAAQ,GAAIJ,SAAS,CAACpB,CAAC,KAAK,CAAC,CAAC,KAAM,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE,GAAI,IAAI;QACnEmB,SAAS,CAAEE,YAAY,GAAGrB,CAAC,KAAM,CAAC,CAAC,IAAIwB,QAAQ,IAAK,EAAE,GAAI,CAACH,YAAY,GAAGrB,CAAC,IAAI,CAAC,GAAI,CAAE;MACxF;IACF,CAAC,MAAM;MACL;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,YAAY,EAAEtB,CAAC,IAAI,CAAC,EAAE;QACxCmB,SAAS,CAAEE,YAAY,GAAGrB,CAAC,KAAM,CAAC,CAAC,GAAGoB,SAAS,CAACpB,CAAC,KAAK,CAAC,CAAC;MAC1D;IACF;IACA,IAAI,CAACjB,QAAQ,IAAIuC,YAAY;;IAE7B;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN;IACA,MAAM;MAAE1C,KAAK;MAAEE;IAAS,CAAC,GAAG,IAAI;;IAEhC;IACAF,KAAK,CAACE,QAAQ,KAAK,CAAC,CAAC,IAAI,UAAU,IAAK,EAAE,GAAIA,QAAQ,GAAG,CAAC,GAAI,CAAE;IAChEF,KAAK,CAACX,MAAM,GAAGuC,IAAI,CAACgB,IAAI,CAAC1C,QAAQ,GAAG,CAAC,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEL,KAAKA,CAAA,EAAG;IACN,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK,CAACgD,IAAI,CAAC,IAAI,CAAC;IACpChD,KAAK,CAACG,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC8C,KAAK,CAAC,CAAC,CAAC;IAEjC,OAAOjD,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMqC,GAAG,GAAG;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAASA,CAACE,SAAS,EAAE;IACnB;IACA,MAAM;MAAErC,KAAK;MAAEE;IAAS,CAAC,GAAGmC,SAAS;;IAErC;IACA,MAAMU,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,QAAQ,EAAEiB,CAAC,IAAI,CAAC,EAAE;MACpC,MAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAC,CAAC,KAAM,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE,GAAI,IAAI;MAC3D4B,QAAQ,CAAChB,IAAI,CAAC,CAACiB,IAAI,KAAK,CAAC,EAAEhB,QAAQ,CAAC,EAAE,CAAC,CAAC;MACxCe,QAAQ,CAAChB,IAAI,CAAC,CAACiB,IAAI,GAAG,IAAI,EAAEhB,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3C;IAEA,OAAOe,QAAQ,CAACE,IAAI,CAAC,EAAE,CAAC;EAC1B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,MAAM,EAAE;IACZ;IACA,MAAMC,YAAY,GAAGD,MAAM,CAAC9D,MAAM;;IAElC;IACA,MAAMW,KAAK,GAAG,EAAE;IAChB,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,YAAY,EAAEjC,CAAC,IAAI,CAAC,EAAE;MACxCnB,KAAK,CAACmB,CAAC,KAAK,CAAC,CAAC,IAAIkC,QAAQ,CAACF,MAAM,CAACG,MAAM,CAACnC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAK,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE;IAC3E;IAEA,OAAO,IAAIpB,SAAS,CAACC,KAAK,EAAEoD,YAAY,GAAG,CAAC,CAAC;EAC/C;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,MAAM,GAAG;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,SAASA,CAACE,SAAS,EAAE;IACnB;IACA,MAAM;MAAErC,KAAK;MAAEE;IAAS,CAAC,GAAGmC,SAAS;;IAErC;IACA,MAAMmB,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,QAAQ,EAAEiB,CAAC,IAAI,CAAC,EAAE;MACpC,MAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAC,CAAC,KAAM,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE,GAAI,IAAI;MAC3DqC,WAAW,CAACzB,IAAI,CAAC0B,MAAM,CAACC,YAAY,CAACV,IAAI,CAAC,CAAC;IAC7C;IAEA,OAAOQ,WAAW,CAACP,IAAI,CAAC,EAAE,CAAC;EAC7B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACS,SAAS,EAAE;IACf;IACA,MAAMC,eAAe,GAAGD,SAAS,CAACtE,MAAM;;IAExC;IACA,MAAMW,KAAK,GAAG,EAAE;IAChB,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,eAAe,EAAEzC,CAAC,IAAI,CAAC,EAAE;MAC3CnB,KAAK,CAACmB,CAAC,KAAK,CAAC,CAAC,IAAI,CAACwC,SAAS,CAACE,UAAU,CAAC1C,CAAC,CAAC,GAAG,IAAI,KAAM,EAAE,GAAIA,CAAC,GAAG,CAAC,GAAI,CAAE;IAC1E;IAEA,OAAO,IAAIpB,SAAS,CAACC,KAAK,EAAE4D,eAAe,CAAC;EAC9C;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,IAAI,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE3B,SAASA,CAACE,SAAS,EAAE;IACnB,IAAI;MACF,OAAO0B,kBAAkB,CAACC,MAAM,CAACT,MAAM,CAACpB,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,OAAO4B,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhB,KAAKA,CAACiB,OAAO,EAAE;IACb,OAAOZ,MAAM,CAACL,KAAK,CAACkB,QAAQ,CAACC,kBAAkB,CAACF,OAAO,CAAC,CAAC,CAAC;EAC5D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,sBAAsB,SAASrF,IAAI,CAAC;EAC/Ca,WAAWA,CAAA,EAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACyE,cAAc,GAAG,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN;IACA,IAAI,CAACC,KAAK,GAAG,IAAI1E,SAAS,EAAE;IAC5B,IAAI,CAAC2E,WAAW,GAAG,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAIC,MAAM,GAAGD,IAAI;;IAEjB;IACA,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC9BA,MAAM,GAAGf,IAAI,CAACZ,KAAK,CAAC2B,MAAM,CAAC;IAC7B;;IAEA;IACA,IAAI,CAACJ,KAAK,CAACrC,MAAM,CAACyC,MAAM,CAAC;IACzB,IAAI,CAACH,WAAW,IAAIG,MAAM,CAAC3E,QAAQ;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,QAAQA,CAACC,OAAO,EAAE;IAChB,IAAIC,cAAc;;IAElB;IACA,MAAM;MAAEP,KAAK,EAAEG,IAAI;MAAEK;IAAU,CAAC,GAAG,IAAI;IACvC,MAAMC,SAAS,GAAGN,IAAI,CAAC5E,KAAK;IAC5B,MAAMmF,YAAY,GAAGP,IAAI,CAAC1E,QAAQ;IAClC,MAAMkF,cAAc,GAAGH,SAAS,GAAG,CAAC;;IAEpC;IACA,IAAII,YAAY,GAAGF,YAAY,GAAGC,cAAc;IAChD,IAAIL,OAAO,EAAE;MACX;MACAM,YAAY,GAAGzD,IAAI,CAACgB,IAAI,CAACyC,YAAY,CAAC;IACxC,CAAC,MAAM;MACL;MACA;MACAA,YAAY,GAAGzD,IAAI,CAAC0D,GAAG,CAAC,CAACD,YAAY,GAAG,CAAC,IAAI,IAAI,CAACd,cAAc,EAAE,CAAC,CAAC;IACtE;;IAEA;IACA,MAAMgB,WAAW,GAAGF,YAAY,GAAGJ,SAAS;;IAE5C;IACA,MAAMO,WAAW,GAAG5D,IAAI,CAAC6D,GAAG,CAACF,WAAW,GAAG,CAAC,EAAEJ,YAAY,CAAC;;IAE3D;IACA,IAAII,WAAW,EAAE;MACf,KAAK,IAAIG,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGH,WAAW,EAAEG,MAAM,IAAIT,SAAS,EAAE;QAC9D;QACA,IAAI,CAACU,eAAe,CAACT,SAAS,EAAEQ,MAAM,CAAC;MACzC;;MAEA;MACAV,cAAc,GAAGE,SAAS,CAACU,MAAM,CAAC,CAAC,EAAEL,WAAW,CAAC;MACjDX,IAAI,CAAC1E,QAAQ,IAAIsF,WAAW;IAC9B;;IAEA;IACA,OAAO,IAAIzF,SAAS,CAACiF,cAAc,EAAEQ,WAAW,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE3F,KAAKA,CAAA,EAAG;IACN,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK,CAACgD,IAAI,CAAC,IAAI,CAAC;IACpChD,KAAK,CAAC4E,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC5E,KAAK,EAAE;IAEhC,OAAOA,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgG,MAAM,SAASvB,sBAAsB,CAAC;EACjDxE,WAAWA,CAACgG,GAAG,EAAE;IACf,KAAK,EAAE;IAEP,IAAI,CAACb,SAAS,GAAG,GAAG,GAAG,EAAE;;IAEzB;AACJ;AACA;IACI,IAAI,CAACa,GAAG,GAAGnG,MAAM,CAACC,MAAM,CAAC,IAAIX,IAAI,EAAE,EAAE6G,GAAG,CAAC;;IAEzC;IACA,IAAI,CAACtB,KAAK,EAAE;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOuB,aAAaA,CAACC,SAAS,EAAE;IAC9B,OAAO,CAACC,OAAO,EAAEH,GAAG,KAAK,IAAIE,SAAS,CAACF,GAAG,CAAC,CAACI,QAAQ,CAACD,OAAO,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOE,iBAAiBA,CAACH,SAAS,EAAE;IAClC,OAAO,CAACC,OAAO,EAAEG,GAAG,KAAK,IAAIC,IAAI,CAACL,SAAS,EAAEI,GAAG,CAAC,CAACF,QAAQ,CAACD,OAAO,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEzB,KAAKA,CAAA,EAAG;IACN;IACA,KAAK,CAACA,KAAK,CAAC3B,IAAI,CAAC,IAAI,CAAC;;IAEtB;IACA,IAAI,CAACyD,QAAQ,EAAE;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,aAAa,EAAE;IACpB;IACA,IAAI,CAAC7B,OAAO,CAAC6B,aAAa,CAAC;;IAE3B;IACA,IAAI,CAAC1B,QAAQ,EAAE;;IAEf;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,QAAQA,CAACM,aAAa,EAAE;IACtB;IACA,IAAIA,aAAa,EAAE;MACjB,IAAI,CAAC7B,OAAO,CAAC6B,aAAa,CAAC;IAC7B;;IAEA;IACA,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,EAAE;IAE/B,OAAOD,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMJ,IAAI,SAASpH,IAAI,CAAC;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,WAAWA,CAACkG,SAAS,EAAEI,GAAG,EAAE;IAC1B,KAAK,EAAE;IAEP,MAAMO,MAAM,GAAG,IAAIX,SAAS,EAAE;IAC9B,IAAI,CAACY,OAAO,GAAGD,MAAM;;IAErB;IACA,IAAIE,IAAI,GAAGT,GAAG;IACd,IAAI,OAAOS,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG/C,IAAI,CAACZ,KAAK,CAAC2D,IAAI,CAAC;IACzB;;IAEA;IACA,MAAMC,eAAe,GAAGH,MAAM,CAAC1B,SAAS;IACxC,MAAM8B,oBAAoB,GAAGD,eAAe,GAAG,CAAC;;IAEhD;IACA,IAAID,IAAI,CAAC3G,QAAQ,GAAG6G,oBAAoB,EAAE;MACxCF,IAAI,GAAGF,MAAM,CAACT,QAAQ,CAACE,GAAG,CAAC;IAC7B;;IAEA;IACAS,IAAI,CAACnE,KAAK,EAAE;;IAEZ;IACA,MAAMsE,IAAI,GAAGH,IAAI,CAAChH,KAAK,EAAE;IACzB,IAAI,CAACoH,KAAK,GAAGD,IAAI;IACjB,MAAME,IAAI,GAAGL,IAAI,CAAChH,KAAK,EAAE;IACzB,IAAI,CAACsH,KAAK,GAAGD,IAAI;;IAEjB;IACA,MAAME,SAAS,GAAGJ,IAAI,CAAChH,KAAK;IAC5B,MAAMqH,SAAS,GAAGH,IAAI,CAAClH,KAAK;;IAE5B;IACA,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2F,eAAe,EAAE3F,CAAC,IAAI,CAAC,EAAE;MAC3CiG,SAAS,CAACjG,CAAC,CAAC,IAAI,UAAU;MAC1BkG,SAAS,CAAClG,CAAC,CAAC,IAAI,UAAU;IAC5B;IACA6F,IAAI,CAAC9G,QAAQ,GAAG6G,oBAAoB;IACpCG,IAAI,CAAChH,QAAQ,GAAG6G,oBAAoB;;IAEpC;IACA,IAAI,CAACvC,KAAK,EAAE;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEA,KAAKA,CAAA,EAAG;IACN;IACA,MAAMmC,MAAM,GAAG,IAAI,CAACC,OAAO;;IAE3B;IACAD,MAAM,CAACnC,KAAK,EAAE;IACdmC,MAAM,CAACJ,MAAM,CAAC,IAAI,CAACY,KAAK,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEZ,MAAMA,CAACC,aAAa,EAAE;IACpB,IAAI,CAACI,OAAO,CAACL,MAAM,CAACC,aAAa,CAAC;;IAElC;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEN,QAAQA,CAACM,aAAa,EAAE;IACtB;IACA,MAAMG,MAAM,GAAG,IAAI,CAACC,OAAO;;IAE3B;IACA,MAAMU,SAAS,GAAGX,MAAM,CAACT,QAAQ,CAACM,aAAa,CAAC;IAChDG,MAAM,CAACnC,KAAK,EAAE;IACd,MAAM+C,IAAI,GAAGZ,MAAM,CAACT,QAAQ,CAAC,IAAI,CAACe,KAAK,CAACpH,KAAK,EAAE,CAACuC,MAAM,CAACkF,SAAS,CAAC,CAAC;IAElE,OAAOC,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module"}