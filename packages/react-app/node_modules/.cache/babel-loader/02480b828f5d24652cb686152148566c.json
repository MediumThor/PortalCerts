{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/components/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Link } from 'react-router-dom';\nimport Web3Modal from \"web3modal\";\nimport { Address } from \".\";\nimport { usePoller } from \"../hooks\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Button } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INFURA_ID = process.env.REACT_APP_INFURA_ID;\nconst web3Modal = new Web3Modal({\n  //network: \"mainnet\", // optional\n  cacheProvider: true,\n  // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\nexport default function Account(props) {\n  _s();\n\n  const loadWeb3Modal = async () => {\n    const provider = await web3Modal.connect();\n    await props.setInjectedProvider(new ethers.providers.Web3Provider(provider));\n  };\n\n  const logoutOfWeb3Modal = async () => {\n    const clear = await web3Modal.clearCachedProvider();\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, []); // runs once if cached provider exist\n\n  useEffect(() => {\n    pollInjectedProvider();\n  }, [props.injectedProvider]);\n\n  const pollInjectedProvider = async () => {\n    if (props.injectedProvider) {\n      let accounts = await props.injectedProvider.listAccounts();\n\n      if (accounts && accounts[0] && accounts[0] != props.account) {\n        //console.log(\"ADDRESS: \",accounts[0])\n        if (typeof props.setAddress == \"function\") props.setAddress(accounts[0]);\n      }\n    }\n  }; // turn on address poller for injected provider\n\n\n  usePoller(() => {\n    pollInjectedProvider();\n  }, props.pollTime ? props.pollTime : 1999);\n  let modalButtons = [];\n\n  if (web3Modal.cachedProvider) {\n    modalButtons.push( /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        verticalAlign: \"top\",\n        marginLeft: 8,\n        marginTop: 2\n      },\n      size: \"small\",\n      onClick: logoutOfWeb3Modal,\n      children: \"Log Out\"\n    }, \"logoutbutton\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this));\n  } else {\n    modalButtons.push( /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        verticalAlign: \"top\",\n        marginLeft: 8,\n        marginTop: 2\n      },\n      size: \"small\",\n      onClick: loadWeb3Modal,\n      children: \"Connect Wallet\"\n    }, \"loginbutton\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this));\n  }\n\n  let displayAddress;\n\n  if (props.address) {\n    displayAddress = /*#__PURE__*/_jsxDEV(Address, {\n      value: props.address,\n      ensProvider: props.mainnetProvider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 22\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        float: \"left\",\n        marginTop: \"4px\"\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"ANCHOR CERTIFICATES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 57\n        }, this), \" - \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/stats\",\n          children: \"STATS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 99\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), displayAddress, modalButtons, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Account, \"N9yTHIqnd3EUAmlMTPhqNqPdHBw=\", false, function () {\n  return [usePoller];\n});\n\n_c = Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/components/Account.js"],"names":["React","useEffect","ethers","Link","Web3Modal","Address","usePoller","WalletConnectProvider","Button","INFURA_ID","process","env","REACT_APP_INFURA_ID","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","infuraId","Account","props","loadWeb3Modal","provider","connect","setInjectedProvider","providers","Web3Provider","logoutOfWeb3Modal","clear","clearCachedProvider","setTimeout","window","location","reload","cachedProvider","pollInjectedProvider","injectedProvider","accounts","listAccounts","account","setAddress","pollTime","modalButtons","push","verticalAlign","marginLeft","marginTop","displayAddress","address","mainnetProvider","float"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Link } from 'react-router-dom';\nimport Web3Modal from \"web3modal\";\nimport { Address } from \".\"\nimport { usePoller } from \"../hooks\"\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Button } from 'antd';\n\nconst INFURA_ID = process.env.REACT_APP_INFURA_ID;\n\nconst web3Modal = new Web3Modal({\n  //network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\n\nexport default function Account(props) {\n\n  const loadWeb3Modal = async () => {\n    const provider = await web3Modal.connect();\n    await props.setInjectedProvider(new ethers.providers.Web3Provider(provider))\n  };\n\n  const logoutOfWeb3Modal = async ()=>{\n    const clear = await web3Modal.clearCachedProvider();\n    setTimeout(()=>{\n      window.location.reload()\n    },1)\n  }\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, []); // runs once if cached provider exist\n\n  useEffect(() => {\n    pollInjectedProvider();\n  }, [props.injectedProvider]);\n\n  const pollInjectedProvider = async () => {\n    if(props.injectedProvider){\n      let accounts = await props.injectedProvider.listAccounts()\n      if(accounts && accounts[0] && accounts[0] != props.account){\n        //console.log(\"ADDRESS: \",accounts[0])\n        if(typeof props.setAddress == \"function\") props.setAddress(accounts[0])\n      }\n    }\n  }\n\n  // turn on address poller for injected provider\n  usePoller(()=>{pollInjectedProvider()},props.pollTime?props.pollTime:1999)\n  \n  let modalButtons = []\n  if (web3Modal.cachedProvider) {\n    modalButtons.push(\n      <Button key=\"logoutbutton\" style={{verticalAlign:\"top\",marginLeft:8,marginTop:2}} size={\"small\"} onClick={logoutOfWeb3Modal}>Log Out</Button>\n    )\n  }else{\n    modalButtons.push(\n      <Button key=\"loginbutton\" style={{verticalAlign:\"top\",marginLeft:8,marginTop:2}} size={\"small\"} onClick={loadWeb3Modal}>Connect Wallet</Button>\n    )\n  }    \n  \n  let displayAddress;\n  if(props.address) {\n    displayAddress = <Address value={props.address} ensProvider={props.mainnetProvider}/>;\n  }\n\n  return (\n    <div className=\"account\" >\n      <span style={{float:\"left\",marginTop:\"4px\"}}> <h3><Link to=\"/\">ANCHOR CERTIFICATES</Link> - <Link to=\"/stats\">STATS</Link></h3>\n      \n      </span>\n      {displayAddress}\n      {modalButtons}\n      <hr />\n    </div>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}