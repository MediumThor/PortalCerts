{"ast":null,"code":"import { BlockCipherMode } from './cipher-core.js';\nconst incWord = word => {\n  let _word = word;\n  if ((word >> 24 & 0xff) === 0xff) {\n    // overflow\n    let b1 = word >> 16 & 0xff;\n    let b2 = word >> 8 & 0xff;\n    let b3 = word & 0xff;\n    if (b1 === 0xff) {\n      // overflow b1\n      b1 = 0;\n      if (b2 === 0xff) {\n        b2 = 0;\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n    _word = 0;\n    _word += b1 << 16;\n    _word += b2 << 8;\n    _word += b3;\n  } else {\n    _word += 0x01 << 24;\n  }\n  return _word;\n};\nconst incCounter = counter => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n  return _counter;\n};\n\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nexport class CTRGladman extends BlockCipherMode {}\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    incCounter(counter);\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;","map":{"version":3,"names":["BlockCipherMode","incWord","word","_word","b1","b2","b3","incCounter","counter","_counter","CTRGladman","Encryptor","processBlock","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","slice","undefined","keystream","encryptBlock","i","Decryptor"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/node_modules/crypto-es/lib/mode-ctr-gladman.js"],"sourcesContent":["import {\n  BlockCipherMode,\n} from './cipher-core.js';\n\nconst incWord = (word) => {\n  let _word = word;\n\n  if (((word >> 24) & 0xff) === 0xff) { // overflow\n    let b1 = (word >> 16) & 0xff;\n    let b2 = (word >> 8) & 0xff;\n    let b3 = word & 0xff;\n\n    if (b1 === 0xff) { // overflow b1\n      b1 = 0;\n      if (b2 === 0xff) {\n        b2 = 0;\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += (b1 << 16);\n    _word += (b2 << 8);\n    _word += b3;\n  } else {\n    _word += (0x01 << 24);\n  }\n  return _word;\n};\n\nconst incCounter = (counter) => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n  return _counter;\n};\n\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nexport class CTRGladman extends BlockCipherMode {\n}\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n\n    incCounter(counter);\n\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;\n"],"mappings":"AAAA,SACEA,eAAe,QACV,kBAAkB;AAEzB,MAAMC,OAAO,GAAIC,IAAI,IAAK;EACxB,IAAIC,KAAK,GAAGD,IAAI;EAEhB,IAAI,CAAEA,IAAI,IAAI,EAAE,GAAI,IAAI,MAAM,IAAI,EAAE;IAAE;IACpC,IAAIE,EAAE,GAAIF,IAAI,IAAI,EAAE,GAAI,IAAI;IAC5B,IAAIG,EAAE,GAAIH,IAAI,IAAI,CAAC,GAAI,IAAI;IAC3B,IAAII,EAAE,GAAGJ,IAAI,GAAG,IAAI;IAEpB,IAAIE,EAAE,KAAK,IAAI,EAAE;MAAE;MACjBA,EAAE,GAAG,CAAC;MACN,IAAIC,EAAE,KAAK,IAAI,EAAE;QACfA,EAAE,GAAG,CAAC;QACN,IAAIC,EAAE,KAAK,IAAI,EAAE;UACfA,EAAE,GAAG,CAAC;QACR,CAAC,MAAM;UACLA,EAAE,IAAI,CAAC;QACT;MACF,CAAC,MAAM;QACLD,EAAE,IAAI,CAAC;MACT;IACF,CAAC,MAAM;MACLD,EAAE,IAAI,CAAC;IACT;IAEAD,KAAK,GAAG,CAAC;IACTA,KAAK,IAAKC,EAAE,IAAI,EAAG;IACnBD,KAAK,IAAKE,EAAE,IAAI,CAAE;IAClBF,KAAK,IAAIG,EAAE;EACb,CAAC,MAAM;IACLH,KAAK,IAAK,IAAI,IAAI,EAAG;EACvB;EACA,OAAOA,KAAK;AACd,CAAC;AAED,MAAMI,UAAU,GAAIC,OAAO,IAAK;EAC9B,MAAMC,QAAQ,GAAGD,OAAO;EACxBC,QAAQ,CAAC,CAAC,CAAC,GAAGR,OAAO,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElC,IAAIA,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACrB;IACAA,QAAQ,CAAC,CAAC,CAAC,GAAGR,OAAO,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;EACA,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASV,eAAe,CAAC;AAEhDU,UAAU,CAACC,SAAS,GAAG,cAAcD,UAAU,CAAC;EAC9CE,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC1B,MAAMC,MAAM,GAAGF,KAAK;;IAEpB;IACA,MAAMG,MAAM,GAAG,IAAI,CAACC,OAAO;IAC3B,MAAM;MAAEC;IAAU,CAAC,GAAGF,MAAM;IAC5B,MAAMG,EAAE,GAAG,IAAI,CAACC,GAAG;IACnB,IAAIZ,OAAO,GAAG,IAAI,CAACC,QAAQ;;IAE3B;IACA,IAAIU,EAAE,EAAE;MACN,IAAI,CAACV,QAAQ,GAAGU,EAAE,CAACE,KAAK,CAAC,CAAC,CAAC;MAC3Bb,OAAO,GAAG,IAAI,CAACC,QAAQ;;MAEvB;MACA,IAAI,CAACW,GAAG,GAAGE,SAAS;IACtB;IAEAf,UAAU,CAACC,OAAO,CAAC;IAEnB,MAAMe,SAAS,GAAGf,OAAO,CAACa,KAAK,CAAC,CAAC,CAAC;IAClCL,MAAM,CAACQ,YAAY,CAACD,SAAS,EAAE,CAAC,CAAC;;IAEjC;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,EAAEO,CAAC,IAAI,CAAC,EAAE;MACrCV,MAAM,CAACD,MAAM,GAAGW,CAAC,CAAC,IAAIF,SAAS,CAACE,CAAC,CAAC;IACpC;EACF;AACF,CAAC;AACDf,UAAU,CAACgB,SAAS,GAAGhB,UAAU,CAACC,SAAS"},"metadata":{},"sourceType":"module"}