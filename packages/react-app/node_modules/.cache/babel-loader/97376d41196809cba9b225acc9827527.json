{"ast":null,"code":"import { WordArray } from './core.js';\nconst swapEndian = word => word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n\n/**\n * UTF-16 BE encoding strategy.\n */\nexport const Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n    return utf16Chars.join('');\n  },\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n    }\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};\nexport const Utf16 = Utf16BE;\n\n/**\n * UTF-16 LE encoding strategy.\n */\nexport const Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n    return utf16Chars.join('');\n  },\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n    }\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};","map":{"version":3,"names":["WordArray","swapEndian","word","Utf16BE","stringify","wordArray","words","sigBytes","utf16Chars","i","codePoint","push","String","fromCharCode","join","parse","utf16Str","utf16StrLength","length","charCodeAt","create","Utf16","Utf16LE"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/enc-utf16.js"],"sourcesContent":["import {\n  WordArray,\n} from './core.js';\n\nconst swapEndian = word => ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\n/**\n * UTF-16 BE encoding strategy.\n */\nexport const Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  },\n};\nexport const Utf16 = Utf16BE;\n\n/**\n * UTF-16 LE encoding strategy.\n */\nexport const Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const utf16Chars = [];\n    for (let i = 0; i < sigBytes; i += 2) {\n      const codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse(utf16Str) {\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}