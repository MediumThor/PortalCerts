{"ast":null,"code":"import { StreamCipher } from './cipher-core.js';\nfunction generateKeystreamWord() {\n  // Shortcuts\n  const S = this._S;\n  let i = this._i;\n  let j = this._j;\n\n  // Generate keystream word\n  let keystreamWord = 0;\n  for (let n = 0; n < 4; n += 1) {\n    i = (i + 1) % 256;\n    j = (j + S[i]) % 256;\n\n    // Swap\n    const t = S[i];\n    S[i] = S[j];\n    S[j] = t;\n    keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n  }\n\n  // Update counters\n  this._i = i;\n  this._j = j;\n  return keystreamWord;\n}\n\n/**\n * RC4 stream cipher algorithm.\n */\nexport class RC4Algo extends StreamCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    const keySigBytes = key.sigBytes;\n\n    // Init sbox\n    this._S = [];\n    const S = this._S;\n    for (let i = 0; i < 256; i += 1) {\n      S[i] = i;\n    }\n\n    // Key setup\n    for (let i = 0, j = 0; i < 256; i += 1) {\n      const keyByteIndex = i % keySigBytes;\n      const keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n      j = (j + S[i] + keyByte) % 256;\n\n      // Swap\n      const t = S[i];\n      S[i] = S[j];\n      S[j] = t;\n    }\n\n    // Counters\n    this._j = 0;\n    this._i = this._j;\n  }\n  _doProcessBlock(M, offset) {\n    const _M = M;\n    _M[offset] ^= generateKeystreamWord.call(this);\n  }\n}\nRC4Algo.keySize = 256 / 32;\nRC4Algo.ivSize = 0;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n */\nexport const RC4 = StreamCipher._createHelper(RC4Algo);\n\n/**\n * Modified RC4 stream cipher algorithm.\n */\nexport class RC4DropAlgo extends RC4Algo {\n  constructor() {\n    super(...arguments);\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} drop The number of keystream words to drop. Default 192\n     */\n    Object.assign(this.cfg, {\n      drop: 192\n    });\n  }\n  _doReset() {\n    super._doReset.call(this);\n\n    // Drop\n    for (let i = this.cfg.drop; i > 0; i -= 1) {\n      generateKeystreamWord.call(this);\n    }\n  }\n}\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n */\nexport const RC4Drop = StreamCipher._createHelper(RC4DropAlgo);","map":{"version":3,"names":["StreamCipher","generateKeystreamWord","S","_S","i","_i","j","_j","keystreamWord","n","t","RC4Algo","_doReset","key","_key","keyWords","words","keySigBytes","sigBytes","keyByteIndex","keyByte","_doProcessBlock","M","offset","_M","call","keySize","ivSize","RC4","_createHelper","RC4DropAlgo","constructor","arguments","Object","assign","cfg","drop","RC4Drop"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/node_modules/crypto-es/lib/rc4.js"],"sourcesContent":["import {\n  StreamCipher,\n} from './cipher-core.js';\n\nfunction generateKeystreamWord() {\n  // Shortcuts\n  const S = this._S;\n  let i = this._i;\n  let j = this._j;\n\n  // Generate keystream word\n  let keystreamWord = 0;\n  for (let n = 0; n < 4; n += 1) {\n    i = (i + 1) % 256;\n    j = (j + S[i]) % 256;\n\n    // Swap\n    const t = S[i];\n    S[i] = S[j];\n    S[j] = t;\n\n    keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n  }\n\n  // Update counters\n  this._i = i;\n  this._j = j;\n\n  return keystreamWord;\n}\n\n/**\n * RC4 stream cipher algorithm.\n */\nexport class RC4Algo extends StreamCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    const keySigBytes = key.sigBytes;\n\n    // Init sbox\n    this._S = [];\n    const S = this._S;\n    for (let i = 0; i < 256; i += 1) {\n      S[i] = i;\n    }\n\n    // Key setup\n    for (let i = 0, j = 0; i < 256; i += 1) {\n      const keyByteIndex = i % keySigBytes;\n      const keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n      j = (j + S[i] + keyByte) % 256;\n\n      // Swap\n      const t = S[i];\n      S[i] = S[j];\n      S[j] = t;\n    }\n\n    // Counters\n    this._j = 0;\n    this._i = this._j;\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M;\n\n    _M[offset] ^= generateKeystreamWord.call(this);\n  }\n}\nRC4Algo.keySize = 256 / 32;\nRC4Algo.ivSize = 0;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n */\nexport const RC4 = StreamCipher._createHelper(RC4Algo);\n\n/**\n * Modified RC4 stream cipher algorithm.\n */\nexport class RC4DropAlgo extends RC4Algo {\n  constructor(...args) {\n    super(...args);\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} drop The number of keystream words to drop. Default 192\n     */\n    Object.assign(this.cfg, { drop: 192 });\n  }\n\n  _doReset() {\n    super._doReset.call(this);\n\n    // Drop\n    for (let i = this.cfg.drop; i > 0; i -= 1) {\n      generateKeystreamWord.call(this);\n    }\n  }\n}\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n */\nexport const RC4Drop = StreamCipher._createHelper(RC4DropAlgo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}