{"ast":null,"code":"import { WordArray } from './core.js';\nconst parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n      nBytes += 1;\n    }\n  }\n  return WordArray.create(words, nBytes);\n};\n\n/**\n * Base64 encoding strategy.\n */\nexport const Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray;\n    const map = this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      const byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n      const byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n      const triplet = byte1 << 16 | byte2 << 8 | byte3;\n      for (let j = 0; j < 4 && i + j * 0.75 < sigBytes; j += 1) {\n        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n    return base64Chars.join('');\n  },\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n};","map":{"version":3,"names":["WordArray","parseLoop","base64Str","base64StrLength","reverseMap","words","nBytes","i","bits1","charCodeAt","bits2","bitsCombined","create","Base64","stringify","wordArray","sigBytes","map","_map","clamp","base64Chars","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","_reverseMap","paddingIndex","indexOf"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/enc-base64.js"],"sourcesContent":["import {\n  WordArray,\n} from './core.js';\n\nconst parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n      nBytes += 1;\n    }\n  }\n  return WordArray.create(words, nBytes);\n};\n\n/**\n * Base64 encoding strategy.\n */\nexport const Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n    const map = this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j += 1) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}