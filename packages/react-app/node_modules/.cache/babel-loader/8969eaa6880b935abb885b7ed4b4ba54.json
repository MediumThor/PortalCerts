{"ast":null,"code":"import { Base, WordArray } from './core.js';\nimport { MD5Algo } from './md5.js';\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\nexport class EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n    this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: MD5Algo,\n      iterations: 1\n    }, cfg);\n  }\n\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n  compute(password, salt) {\n    let block;\n\n    // Shortcut\n    const {\n      cfg\n    } = this;\n\n    // Init hasher\n    const hasher = cfg.hasher.create();\n\n    // Initial values\n    const derivedKey = WordArray.create();\n\n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const {\n      keySize,\n      iterations\n    } = cfg;\n\n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n\n      // Iterations\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n      derivedKey.concat(block);\n    }\n    derivedKey.sigBytes = keySize * 4;\n    return derivedKey;\n  }\n}\n\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\nexport const EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);","map":{"version":3,"names":["Base","WordArray","MD5Algo","EvpKDFAlgo","constructor","cfg","Object","assign","keySize","hasher","iterations","compute","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes","EvpKDF"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/evpkdf.js"],"sourcesContent":["import {\n  Base,\n  WordArray,\n} from './core.js';\nimport { MD5Algo } from './md5.js';\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\nexport class EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n    this.cfg = Object.assign(\n      new Base(),\n      {\n        keySize: 128 / 32,\n        hasher: MD5Algo,\n        iterations: 1,\n      },\n      cfg,\n    );\n  }\n\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n  compute(password, salt) {\n    let block;\n\n    // Shortcut\n    const { cfg } = this;\n\n    // Init hasher\n    const hasher = cfg.hasher.create();\n\n    // Initial values\n    const derivedKey = WordArray.create();\n\n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const { keySize, iterations } = cfg;\n\n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n\n      // Iterations\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n\n      derivedKey.concat(block);\n    }\n    derivedKey.sigBytes = keySize * 4;\n\n    return derivedKey;\n  }\n}\n\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\nexport const EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);\n"],"mappings":"AAAA,SACEA,IAAI,EACJC,SAAS,QACJ,WAAW;AAClB,SAASC,OAAO,QAAQ,UAAU;;AAElC;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASH,IAAI,CAAC;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,WAAWA,CAACC,GAAG,EAAE;IACf,KAAK,EAAE;;IAEP;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACA,GAAG,GAAGC,MAAM,CAACC,MAAM,CACtB,IAAIP,IAAI,EAAE,EACV;MACEQ,OAAO,EAAE,GAAG,GAAG,EAAE;MACjBC,MAAM,EAAEP,OAAO;MACfQ,UAAU,EAAE;IACd,CAAC,EACDL,GAAG,CACJ;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,OAAOA,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACtB,IAAIC,KAAK;;IAET;IACA,MAAM;MAAET;IAAI,CAAC,GAAG,IAAI;;IAEpB;IACA,MAAMI,MAAM,GAAGJ,GAAG,CAACI,MAAM,CAACM,MAAM,EAAE;;IAElC;IACA,MAAMC,UAAU,GAAGf,SAAS,CAACc,MAAM,EAAE;;IAErC;IACA,MAAME,eAAe,GAAGD,UAAU,CAACE,KAAK;IACxC,MAAM;MAAEV,OAAO;MAAEE;IAAW,CAAC,GAAGL,GAAG;;IAEnC;IACA,OAAOY,eAAe,CAACE,MAAM,GAAGX,OAAO,EAAE;MACvC,IAAIM,KAAK,EAAE;QACTL,MAAM,CAACW,MAAM,CAACN,KAAK,CAAC;MACtB;MACAA,KAAK,GAAGL,MAAM,CAACW,MAAM,CAACR,QAAQ,CAAC,CAACS,QAAQ,CAACR,IAAI,CAAC;MAC9CJ,MAAM,CAACa,KAAK,EAAE;;MAEd;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,EAAEa,CAAC,IAAI,CAAC,EAAE;QACtCT,KAAK,GAAGL,MAAM,CAACY,QAAQ,CAACP,KAAK,CAAC;QAC9BL,MAAM,CAACa,KAAK,EAAE;MAChB;MAEAN,UAAU,CAACQ,MAAM,CAACV,KAAK,CAAC;IAC1B;IACAE,UAAU,CAACS,QAAQ,GAAGjB,OAAO,GAAG,CAAC;IAEjC,OAAOQ,UAAU;EACnB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,MAAM,GAAGA,CAACd,QAAQ,EAAEC,IAAI,EAAER,GAAG,KAAKF,UAAU,CAACY,MAAM,CAACV,GAAG,CAAC,CAACM,OAAO,CAACC,QAAQ,EAAEC,IAAI,CAAC"},"metadata":{},"sourceType":"module"}