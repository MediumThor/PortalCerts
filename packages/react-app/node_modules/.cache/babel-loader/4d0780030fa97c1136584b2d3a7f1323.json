{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n  constructor(localName) {\n    super(\"address\", \"address\", localName, false);\n  }\n\n  defaultValue() {\n    return \"0x0000000000000000000000000000000000000000\";\n  }\n\n  encode(writer, value) {\n    try {\n      value = getAddress(value);\n    } catch (error) {\n      this._throwError(error.message, value);\n    }\n\n    return writer.writeValue(value);\n  }\n\n  decode(reader) {\n    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n  }\n\n}","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/@ethersproject/abi/lib.esm/coders/address.js"],"names":["getAddress","hexZeroPad","Coder","AddressCoder","constructor","localName","defaultValue","encode","writer","value","error","_throwError","message","writeValue","decode","reader","readValue","toHexString"],"mappings":"AAAA;;AACA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAO,MAAMC,YAAN,SAA2BD,KAA3B,CAAiC;AACpCE,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,UAAM,SAAN,EAAiB,SAAjB,EAA4BA,SAA5B,EAAuC,KAAvC;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,WAAO,4CAAP;AACH;;AACDC,EAAAA,MAAM,CAACC,MAAD,EAASC,KAAT,EAAgB;AAClB,QAAI;AACAA,MAAAA,KAAK,GAAGT,UAAU,CAACS,KAAD,CAAlB;AACH,KAFD,CAGA,OAAOC,KAAP,EAAc;AACV,WAAKC,WAAL,CAAiBD,KAAK,CAACE,OAAvB,EAAgCH,KAAhC;AACH;;AACD,WAAOD,MAAM,CAACK,UAAP,CAAkBJ,KAAlB,CAAP;AACH;;AACDK,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOf,UAAU,CAACC,UAAU,CAACc,MAAM,CAACC,SAAP,GAAmBC,WAAnB,EAAD,EAAmC,EAAnC,CAAX,CAAjB;AACH;;AAlBmC","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"module"}