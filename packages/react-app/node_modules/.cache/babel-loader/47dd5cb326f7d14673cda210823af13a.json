{"ast":null,"code":"import { WordArray, Hasher } from './core.js';\n\n// Initialization and round constants tables\nconst H = [];\nconst K = [];\n\n// Compute constants\nconst isPrime = n => {\n  const sqrtN = Math.sqrt(n);\n  for (let factor = 2; factor <= sqrtN; factor += 1) {\n    if (!(n % factor)) {\n      return false;\n    }\n  }\n  return true;\n};\nconst getFractionalBits = n => (n - (n | 0)) * 0x100000000 | 0;\nlet n = 2;\nlet nPrime = 0;\nwhile (nPrime < 64) {\n  if (isPrime(n)) {\n    if (nPrime < 8) {\n      H[nPrime] = getFractionalBits(n ** (1 / 2));\n    }\n    K[nPrime] = getFractionalBits(n ** (1 / 3));\n    nPrime += 1;\n  }\n  n += 1;\n}\n\n// Reusable object\nconst W = [];\n\n/**\n * SHA-256 hash algorithm.\n */\nexport class SHA256Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray(H.slice(0));\n  }\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const _H = this._hash.words;\n\n    // Working variables\n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n\n    // Computation\n    for (let i = 0; i < 64; i += 1) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W[i - 15];\n        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        const gamma1x = W[i - 2];\n        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n      const ch = e & f ^ ~e & g;\n      const maj = a & b ^ a & c ^ b & c;\n      const sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      const sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n\n    // Intermediate hash value\n    _H[0] = _H[0] + a | 0;\n    _H[1] = _H[1] + b | 0;\n    _H[2] = _H[2] + c | 0;\n    _H[3] = _H[3] + d | 0;\n    _H[4] = _H[4] + e | 0;\n    _H[5] = _H[5] + f | 0;\n    _H[6] = _H[6] + g | 0;\n    _H[7] = _H[7] + h | 0;\n  }\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Return final computed hash\n    return this._hash;\n  }\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA256('message');\n *     var hash = CryptoJS.SHA256(wordArray);\n */\nexport const SHA256 = Hasher._createHelper(SHA256Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA256(message, key);\n */\nexport const HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);","map":{"version":3,"names":["WordArray","Hasher","H","K","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","nPrime","W","SHA256Algo","_doReset","_hash","slice","_doProcessBlock","M","offset","_H","words","a","b","c","d","e","f","g","h","i","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","_doFinalize","data","_data","dataWords","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","floor","length","_process","clone","call","SHA256","_createHelper","HmacSHA256","_createHmacHelper"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/sha256.js"],"sourcesContent":["import {\n  WordArray,\n  Hasher,\n} from './core.js';\n\n// Initialization and round constants tables\nconst H = [];\nconst K = [];\n\n// Compute constants\nconst isPrime = (n) => {\n  const sqrtN = Math.sqrt(n);\n  for (let factor = 2; factor <= sqrtN; factor += 1) {\n    if (!(n % factor)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst getFractionalBits = n => ((n - (n | 0)) * 0x100000000) | 0;\n\nlet n = 2;\nlet nPrime = 0;\nwhile (nPrime < 64) {\n  if (isPrime(n)) {\n    if (nPrime < 8) {\n      H[nPrime] = getFractionalBits(n ** (1 / 2));\n    }\n    K[nPrime] = getFractionalBits(n ** (1 / 3));\n\n    nPrime += 1;\n  }\n\n  n += 1;\n}\n\n// Reusable object\nconst W = [];\n\n/**\n * SHA-256 hash algorithm.\n */\nexport class SHA256Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray(H.slice(0));\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const _H = this._hash.words;\n\n    // Working variables\n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n\n    // Computation\n    for (let i = 0; i < 64; i += 1) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W[i - 15];\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\n          ^ (gamma0x >>> 3);\n\n        const gamma1x = W[i - 2];\n        const gamma1 = ((gamma1x << 15) | (gamma1x >>> 17))\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\n          ^ (gamma1x >>> 10);\n\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n\n      const ch = (e & f) ^ (~e & g);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n\n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));\n\n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n\n      h = g;\n      g = f;\n      f = e;\n      e = (d + t1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (t1 + t2) | 0;\n    }\n\n    // Intermediate hash value\n    _H[0] = (_H[0] + a) | 0;\n    _H[1] = (_H[1] + b) | 0;\n    _H[2] = (_H[2] + c) | 0;\n    _H[3] = (_H[3] + d) | 0;\n    _H[4] = (_H[4] + e) | 0;\n    _H[5] = (_H[5] + f) | 0;\n    _H[6] = (_H[6] + g) | 0;\n    _H[7] = (_H[7] + h) | 0;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Return final computed hash\n    return this._hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA256('message');\n *     var hash = CryptoJS.SHA256(wordArray);\n */\nexport const SHA256 = Hasher._createHelper(SHA256Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA256(message, key);\n */\nexport const HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}