{"ast":null,"code":"import { WordArray } from './core.js';\nimport { BlockCipher } from './cipher-core.js';\n\n// Permuted Choice 1 constants\nconst PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];\n\n// Permuted Choice 2 constants\nconst PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];\n\n// Cumulative bit shift constants\nconst BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n// SBOXes and round permutation constants\nconst SBOX_P = [{\n  0x0: 0x808200,\n  0x10000000: 0x8000,\n  0x20000000: 0x808002,\n  0x30000000: 0x2,\n  0x40000000: 0x200,\n  0x50000000: 0x808202,\n  0x60000000: 0x800202,\n  0x70000000: 0x800000,\n  0x80000000: 0x202,\n  0x90000000: 0x800200,\n  0xa0000000: 0x8200,\n  0xb0000000: 0x808000,\n  0xc0000000: 0x8002,\n  0xd0000000: 0x800002,\n  0xe0000000: 0x0,\n  0xf0000000: 0x8202,\n  0x8000000: 0x0,\n  0x18000000: 0x808202,\n  0x28000000: 0x8202,\n  0x38000000: 0x8000,\n  0x48000000: 0x808200,\n  0x58000000: 0x200,\n  0x68000000: 0x808002,\n  0x78000000: 0x2,\n  0x88000000: 0x800200,\n  0x98000000: 0x8200,\n  0xa8000000: 0x808000,\n  0xb8000000: 0x800202,\n  0xc8000000: 0x800002,\n  0xd8000000: 0x8002,\n  0xe8000000: 0x202,\n  0xf8000000: 0x800000,\n  0x1: 0x8000,\n  0x10000001: 0x2,\n  0x20000001: 0x808200,\n  0x30000001: 0x800000,\n  0x40000001: 0x808002,\n  0x50000001: 0x8200,\n  0x60000001: 0x200,\n  0x70000001: 0x800202,\n  0x80000001: 0x808202,\n  0x90000001: 0x808000,\n  0xa0000001: 0x800002,\n  0xb0000001: 0x8202,\n  0xc0000001: 0x202,\n  0xd0000001: 0x800200,\n  0xe0000001: 0x8002,\n  0xf0000001: 0x0,\n  0x8000001: 0x808202,\n  0x18000001: 0x808000,\n  0x28000001: 0x800000,\n  0x38000001: 0x200,\n  0x48000001: 0x8000,\n  0x58000001: 0x800002,\n  0x68000001: 0x2,\n  0x78000001: 0x8202,\n  0x88000001: 0x8002,\n  0x98000001: 0x800202,\n  0xa8000001: 0x202,\n  0xb8000001: 0x808200,\n  0xc8000001: 0x800200,\n  0xd8000001: 0x0,\n  0xe8000001: 0x8200,\n  0xf8000001: 0x808002\n}, {\n  0x0: 0x40084010,\n  0x1000000: 0x4000,\n  0x2000000: 0x80000,\n  0x3000000: 0x40080010,\n  0x4000000: 0x40000010,\n  0x5000000: 0x40084000,\n  0x6000000: 0x40004000,\n  0x7000000: 0x10,\n  0x8000000: 0x84000,\n  0x9000000: 0x40004010,\n  0xa000000: 0x40000000,\n  0xb000000: 0x84010,\n  0xc000000: 0x80010,\n  0xd000000: 0x0,\n  0xe000000: 0x4010,\n  0xf000000: 0x40080000,\n  0x800000: 0x40004000,\n  0x1800000: 0x84010,\n  0x2800000: 0x10,\n  0x3800000: 0x40004010,\n  0x4800000: 0x40084010,\n  0x5800000: 0x40000000,\n  0x6800000: 0x80000,\n  0x7800000: 0x40080010,\n  0x8800000: 0x80010,\n  0x9800000: 0x0,\n  0xa800000: 0x4000,\n  0xb800000: 0x40080000,\n  0xc800000: 0x40000010,\n  0xd800000: 0x84000,\n  0xe800000: 0x40084000,\n  0xf800000: 0x4010,\n  0x10000000: 0x0,\n  0x11000000: 0x40080010,\n  0x12000000: 0x40004010,\n  0x13000000: 0x40084000,\n  0x14000000: 0x40080000,\n  0x15000000: 0x10,\n  0x16000000: 0x84010,\n  0x17000000: 0x4000,\n  0x18000000: 0x4010,\n  0x19000000: 0x80000,\n  0x1a000000: 0x80010,\n  0x1b000000: 0x40000010,\n  0x1c000000: 0x84000,\n  0x1d000000: 0x40004000,\n  0x1e000000: 0x40000000,\n  0x1f000000: 0x40084010,\n  0x10800000: 0x84010,\n  0x11800000: 0x80000,\n  0x12800000: 0x40080000,\n  0x13800000: 0x4000,\n  0x14800000: 0x40004000,\n  0x15800000: 0x40084010,\n  0x16800000: 0x10,\n  0x17800000: 0x40000000,\n  0x18800000: 0x40084000,\n  0x19800000: 0x40000010,\n  0x1a800000: 0x40004010,\n  0x1b800000: 0x80010,\n  0x1c800000: 0x0,\n  0x1d800000: 0x4010,\n  0x1e800000: 0x40080010,\n  0x1f800000: 0x84000\n}, {\n  0x0: 0x104,\n  0x100000: 0x0,\n  0x200000: 0x4000100,\n  0x300000: 0x10104,\n  0x400000: 0x10004,\n  0x500000: 0x4000004,\n  0x600000: 0x4010104,\n  0x700000: 0x4010000,\n  0x800000: 0x4000000,\n  0x900000: 0x4010100,\n  0xa00000: 0x10100,\n  0xb00000: 0x4010004,\n  0xc00000: 0x4000104,\n  0xd00000: 0x10000,\n  0xe00000: 0x4,\n  0xf00000: 0x100,\n  0x80000: 0x4010100,\n  0x180000: 0x4010004,\n  0x280000: 0x0,\n  0x380000: 0x4000100,\n  0x480000: 0x4000004,\n  0x580000: 0x10000,\n  0x680000: 0x10004,\n  0x780000: 0x104,\n  0x880000: 0x4,\n  0x980000: 0x100,\n  0xa80000: 0x4010000,\n  0xb80000: 0x10104,\n  0xc80000: 0x10100,\n  0xd80000: 0x4000104,\n  0xe80000: 0x4010104,\n  0xf80000: 0x4000000,\n  0x1000000: 0x4010100,\n  0x1100000: 0x10004,\n  0x1200000: 0x10000,\n  0x1300000: 0x4000100,\n  0x1400000: 0x100,\n  0x1500000: 0x4010104,\n  0x1600000: 0x4000004,\n  0x1700000: 0x0,\n  0x1800000: 0x4000104,\n  0x1900000: 0x4000000,\n  0x1a00000: 0x4,\n  0x1b00000: 0x10100,\n  0x1c00000: 0x4010000,\n  0x1d00000: 0x104,\n  0x1e00000: 0x10104,\n  0x1f00000: 0x4010004,\n  0x1080000: 0x4000000,\n  0x1180000: 0x104,\n  0x1280000: 0x4010100,\n  0x1380000: 0x0,\n  0x1480000: 0x10004,\n  0x1580000: 0x4000100,\n  0x1680000: 0x100,\n  0x1780000: 0x4010004,\n  0x1880000: 0x10000,\n  0x1980000: 0x4010104,\n  0x1a80000: 0x10104,\n  0x1b80000: 0x4000004,\n  0x1c80000: 0x4000104,\n  0x1d80000: 0x4010000,\n  0x1e80000: 0x4,\n  0x1f80000: 0x10100\n}, {\n  0x0: 0x80401000,\n  0x10000: 0x80001040,\n  0x20000: 0x401040,\n  0x30000: 0x80400000,\n  0x40000: 0x0,\n  0x50000: 0x401000,\n  0x60000: 0x80000040,\n  0x70000: 0x400040,\n  0x80000: 0x80000000,\n  0x90000: 0x400000,\n  0xa0000: 0x40,\n  0xb0000: 0x80001000,\n  0xc0000: 0x80400040,\n  0xd0000: 0x1040,\n  0xe0000: 0x1000,\n  0xf0000: 0x80401040,\n  0x8000: 0x80001040,\n  0x18000: 0x40,\n  0x28000: 0x80400040,\n  0x38000: 0x80001000,\n  0x48000: 0x401000,\n  0x58000: 0x80401040,\n  0x68000: 0x0,\n  0x78000: 0x80400000,\n  0x88000: 0x1000,\n  0x98000: 0x80401000,\n  0xa8000: 0x400000,\n  0xb8000: 0x1040,\n  0xc8000: 0x80000000,\n  0xd8000: 0x400040,\n  0xe8000: 0x401040,\n  0xf8000: 0x80000040,\n  0x100000: 0x400040,\n  0x110000: 0x401000,\n  0x120000: 0x80000040,\n  0x130000: 0x0,\n  0x140000: 0x1040,\n  0x150000: 0x80400040,\n  0x160000: 0x80401000,\n  0x170000: 0x80001040,\n  0x180000: 0x80401040,\n  0x190000: 0x80000000,\n  0x1a0000: 0x80400000,\n  0x1b0000: 0x401040,\n  0x1c0000: 0x80001000,\n  0x1d0000: 0x400000,\n  0x1e0000: 0x40,\n  0x1f0000: 0x1000,\n  0x108000: 0x80400000,\n  0x118000: 0x80401040,\n  0x128000: 0x0,\n  0x138000: 0x401000,\n  0x148000: 0x400040,\n  0x158000: 0x80000000,\n  0x168000: 0x80001040,\n  0x178000: 0x40,\n  0x188000: 0x80000040,\n  0x198000: 0x1000,\n  0x1a8000: 0x80001000,\n  0x1b8000: 0x80400040,\n  0x1c8000: 0x1040,\n  0x1d8000: 0x80401000,\n  0x1e8000: 0x400000,\n  0x1f8000: 0x401040\n}, {\n  0x0: 0x80,\n  0x1000: 0x1040000,\n  0x2000: 0x40000,\n  0x3000: 0x20000000,\n  0x4000: 0x20040080,\n  0x5000: 0x1000080,\n  0x6000: 0x21000080,\n  0x7000: 0x40080,\n  0x8000: 0x1000000,\n  0x9000: 0x20040000,\n  0xa000: 0x20000080,\n  0xb000: 0x21040080,\n  0xc000: 0x21040000,\n  0xd000: 0x0,\n  0xe000: 0x1040080,\n  0xf000: 0x21000000,\n  0x800: 0x1040080,\n  0x1800: 0x21000080,\n  0x2800: 0x80,\n  0x3800: 0x1040000,\n  0x4800: 0x40000,\n  0x5800: 0x20040080,\n  0x6800: 0x21040000,\n  0x7800: 0x20000000,\n  0x8800: 0x20040000,\n  0x9800: 0x0,\n  0xa800: 0x21040080,\n  0xb800: 0x1000080,\n  0xc800: 0x20000080,\n  0xd800: 0x21000000,\n  0xe800: 0x1000000,\n  0xf800: 0x40080,\n  0x10000: 0x40000,\n  0x11000: 0x80,\n  0x12000: 0x20000000,\n  0x13000: 0x21000080,\n  0x14000: 0x1000080,\n  0x15000: 0x21040000,\n  0x16000: 0x20040080,\n  0x17000: 0x1000000,\n  0x18000: 0x21040080,\n  0x19000: 0x21000000,\n  0x1a000: 0x1040000,\n  0x1b000: 0x20040000,\n  0x1c000: 0x40080,\n  0x1d000: 0x20000080,\n  0x1e000: 0x0,\n  0x1f000: 0x1040080,\n  0x10800: 0x21000080,\n  0x11800: 0x1000000,\n  0x12800: 0x1040000,\n  0x13800: 0x20040080,\n  0x14800: 0x20000000,\n  0x15800: 0x1040080,\n  0x16800: 0x80,\n  0x17800: 0x21040000,\n  0x18800: 0x40080,\n  0x19800: 0x21040080,\n  0x1a800: 0x0,\n  0x1b800: 0x21000000,\n  0x1c800: 0x1000080,\n  0x1d800: 0x40000,\n  0x1e800: 0x20040000,\n  0x1f800: 0x20000080\n}, {\n  0x0: 0x10000008,\n  0x100: 0x2000,\n  0x200: 0x10200000,\n  0x300: 0x10202008,\n  0x400: 0x10002000,\n  0x500: 0x200000,\n  0x600: 0x200008,\n  0x700: 0x10000000,\n  0x800: 0x0,\n  0x900: 0x10002008,\n  0xa00: 0x202000,\n  0xb00: 0x8,\n  0xc00: 0x10200008,\n  0xd00: 0x202008,\n  0xe00: 0x2008,\n  0xf00: 0x10202000,\n  0x80: 0x10200000,\n  0x180: 0x10202008,\n  0x280: 0x8,\n  0x380: 0x200000,\n  0x480: 0x202008,\n  0x580: 0x10000008,\n  0x680: 0x10002000,\n  0x780: 0x2008,\n  0x880: 0x200008,\n  0x980: 0x2000,\n  0xa80: 0x10002008,\n  0xb80: 0x10200008,\n  0xc80: 0x0,\n  0xd80: 0x10202000,\n  0xe80: 0x202000,\n  0xf80: 0x10000000,\n  0x1000: 0x10002000,\n  0x1100: 0x10200008,\n  0x1200: 0x10202008,\n  0x1300: 0x2008,\n  0x1400: 0x200000,\n  0x1500: 0x10000000,\n  0x1600: 0x10000008,\n  0x1700: 0x202000,\n  0x1800: 0x202008,\n  0x1900: 0x0,\n  0x1a00: 0x8,\n  0x1b00: 0x10200000,\n  0x1c00: 0x2000,\n  0x1d00: 0x10002008,\n  0x1e00: 0x10202000,\n  0x1f00: 0x200008,\n  0x1080: 0x8,\n  0x1180: 0x202000,\n  0x1280: 0x200000,\n  0x1380: 0x10000008,\n  0x1480: 0x10002000,\n  0x1580: 0x2008,\n  0x1680: 0x10202008,\n  0x1780: 0x10200000,\n  0x1880: 0x10202000,\n  0x1980: 0x10200008,\n  0x1a80: 0x2000,\n  0x1b80: 0x202008,\n  0x1c80: 0x200008,\n  0x1d80: 0x0,\n  0x1e80: 0x10000000,\n  0x1f80: 0x10002008\n}, {\n  0x0: 0x100000,\n  0x10: 0x2000401,\n  0x20: 0x400,\n  0x30: 0x100401,\n  0x40: 0x2100401,\n  0x50: 0x0,\n  0x60: 0x1,\n  0x70: 0x2100001,\n  0x80: 0x2000400,\n  0x90: 0x100001,\n  0xa0: 0x2000001,\n  0xb0: 0x2100400,\n  0xc0: 0x2100000,\n  0xd0: 0x401,\n  0xe0: 0x100400,\n  0xf0: 0x2000000,\n  0x8: 0x2100001,\n  0x18: 0x0,\n  0x28: 0x2000401,\n  0x38: 0x2100400,\n  0x48: 0x100000,\n  0x58: 0x2000001,\n  0x68: 0x2000000,\n  0x78: 0x401,\n  0x88: 0x100401,\n  0x98: 0x2000400,\n  0xa8: 0x2100000,\n  0xb8: 0x100001,\n  0xc8: 0x400,\n  0xd8: 0x2100401,\n  0xe8: 0x1,\n  0xf8: 0x100400,\n  0x100: 0x2000000,\n  0x110: 0x100000,\n  0x120: 0x2000401,\n  0x130: 0x2100001,\n  0x140: 0x100001,\n  0x150: 0x2000400,\n  0x160: 0x2100400,\n  0x170: 0x100401,\n  0x180: 0x401,\n  0x190: 0x2100401,\n  0x1a0: 0x100400,\n  0x1b0: 0x1,\n  0x1c0: 0x0,\n  0x1d0: 0x2100000,\n  0x1e0: 0x2000001,\n  0x1f0: 0x400,\n  0x108: 0x100400,\n  0x118: 0x2000401,\n  0x128: 0x2100001,\n  0x138: 0x1,\n  0x148: 0x2000000,\n  0x158: 0x100000,\n  0x168: 0x401,\n  0x178: 0x2100400,\n  0x188: 0x2000001,\n  0x198: 0x2100000,\n  0x1a8: 0x0,\n  0x1b8: 0x2100401,\n  0x1c8: 0x100401,\n  0x1d8: 0x400,\n  0x1e8: 0x2000400,\n  0x1f8: 0x100001\n}, {\n  0x0: 0x8000820,\n  0x1: 0x20000,\n  0x2: 0x8000000,\n  0x3: 0x20,\n  0x4: 0x20020,\n  0x5: 0x8020820,\n  0x6: 0x8020800,\n  0x7: 0x800,\n  0x8: 0x8020000,\n  0x9: 0x8000800,\n  0xa: 0x20800,\n  0xb: 0x8020020,\n  0xc: 0x820,\n  0xd: 0x0,\n  0xe: 0x8000020,\n  0xf: 0x20820,\n  0x80000000: 0x800,\n  0x80000001: 0x8020820,\n  0x80000002: 0x8000820,\n  0x80000003: 0x8000000,\n  0x80000004: 0x8020000,\n  0x80000005: 0x20800,\n  0x80000006: 0x20820,\n  0x80000007: 0x20,\n  0x80000008: 0x8000020,\n  0x80000009: 0x820,\n  0x8000000a: 0x20020,\n  0x8000000b: 0x8020800,\n  0x8000000c: 0x0,\n  0x8000000d: 0x8020020,\n  0x8000000e: 0x8000800,\n  0x8000000f: 0x20000,\n  0x10: 0x20820,\n  0x11: 0x8020800,\n  0x12: 0x20,\n  0x13: 0x800,\n  0x14: 0x8000800,\n  0x15: 0x8000020,\n  0x16: 0x8020020,\n  0x17: 0x20000,\n  0x18: 0x0,\n  0x19: 0x20020,\n  0x1a: 0x8020000,\n  0x1b: 0x8000820,\n  0x1c: 0x8020820,\n  0x1d: 0x20800,\n  0x1e: 0x820,\n  0x1f: 0x8000000,\n  0x80000010: 0x20000,\n  0x80000011: 0x800,\n  0x80000012: 0x8020020,\n  0x80000013: 0x20820,\n  0x80000014: 0x20,\n  0x80000015: 0x8020000,\n  0x80000016: 0x8000000,\n  0x80000017: 0x8000820,\n  0x80000018: 0x8020820,\n  0x80000019: 0x8000020,\n  0x8000001a: 0x8000800,\n  0x8000001b: 0x0,\n  0x8000001c: 0x20800,\n  0x8000001d: 0x820,\n  0x8000001e: 0x20020,\n  0x8000001f: 0x8020800\n}];\n\n// Masks that select the SBOX input\nconst SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n\n// Swap bits across the left and right words\nfunction exchangeLR(offset, mask) {\n  const t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n  this._rBlock ^= t;\n  this._lBlock ^= t << offset;\n}\nfunction exchangeRL(offset, mask) {\n  const t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n  this._lBlock ^= t;\n  this._rBlock ^= t << offset;\n}\n\n/**\n * DES block cipher algorithm.\n */\nexport class DESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n\n    // Select 56 bits according to PC1\n    const keyBits = [];\n    for (let i = 0; i < 56; i += 1) {\n      const keyBitPos = PC1[i] - 1;\n      keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n    }\n\n    // Assemble 16 subkeys\n    this._subKeys = [];\n    const subKeys = this._subKeys;\n    for (let nSubKey = 0; nSubKey < 16; nSubKey += 1) {\n      // Create subkey\n      subKeys[nSubKey] = [];\n      const subKey = subKeys[nSubKey];\n\n      // Shortcut\n      const bitShift = BIT_SHIFTS[nSubKey];\n\n      // Select 48 bits according to PC2\n      for (let i = 0; i < 24; i += 1) {\n        // Select from the left 28 key bits\n        subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;\n\n        // Select from the right 28 key bits\n        subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n      }\n\n      // Since each subkey is applied to an expanded 32-bit input,\n      // the subkey can be broken into 8 values scaled to 32-bits,\n      // which allows the key to be used without expansion\n      subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n      for (let i = 1; i < 7; i += 1) {\n        subKey[i] >>>= (i - 1) * 4 + 3;\n      }\n      subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n    }\n\n    // Compute inverse subkeys\n    this._invSubKeys = [];\n    const invSubKeys = this._invSubKeys;\n    for (let i = 0; i < 16; i += 1) {\n      invSubKeys[i] = subKeys[15 - i];\n    }\n  }\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._subKeys);\n  }\n  decryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._invSubKeys);\n  }\n  _doCryptBlock(M, offset, subKeys) {\n    const _M = M;\n\n    // Get input\n    this._lBlock = M[offset];\n    this._rBlock = M[offset + 1];\n\n    // Initial permutation\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeLR.call(this, 1, 0x55555555);\n\n    // Rounds\n    for (let round = 0; round < 16; round += 1) {\n      // Shortcuts\n      const subKey = subKeys[round];\n      const lBlock = this._lBlock;\n      const rBlock = this._rBlock;\n\n      // Feistel function\n      let f = 0;\n      for (let i = 0; i < 8; i += 1) {\n        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n      }\n      this._lBlock = rBlock;\n      this._rBlock = lBlock ^ f;\n    }\n\n    // Undo swap from last round\n    const t = this._lBlock;\n    this._lBlock = this._rBlock;\n    this._rBlock = t;\n\n    // Final permutation\n    exchangeLR.call(this, 1, 0x55555555);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n    // Set output\n    _M[offset] = this._lBlock;\n    _M[offset + 1] = this._rBlock;\n  }\n}\nDESAlgo.keySize = 64 / 32;\nDESAlgo.ivSize = 64 / 32;\nDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n */\nexport const DES = BlockCipher._createHelper(DESAlgo);\n\n/**\n * Triple-DES block cipher algorithm.\n */\nexport class TripleDESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    // Make sure the key length is valid (64, 128 or >= 192 bit)\n    if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n      throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n    }\n\n    // Extend the key according to the keying options defined in 3DES standard\n    const key1 = keyWords.slice(0, 2);\n    const key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n    const key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n    // Create DES instances\n    this._des1 = DESAlgo.createEncryptor(WordArray.create(key1));\n    this._des2 = DESAlgo.createEncryptor(WordArray.create(key2));\n    this._des3 = DESAlgo.createEncryptor(WordArray.create(key3));\n  }\n  encryptBlock(M, offset) {\n    this._des1.encryptBlock(M, offset);\n    this._des2.decryptBlock(M, offset);\n    this._des3.encryptBlock(M, offset);\n  }\n  decryptBlock(M, offset) {\n    this._des3.decryptBlock(M, offset);\n    this._des2.encryptBlock(M, offset);\n    this._des1.decryptBlock(M, offset);\n  }\n}\nTripleDESAlgo.keySize = 192 / 32;\nTripleDESAlgo.ivSize = 64 / 32;\nTripleDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n */\nexport const TripleDES = BlockCipher._createHelper(TripleDESAlgo);","map":{"version":3,"names":["WordArray","BlockCipher","PC1","PC2","BIT_SHIFTS","SBOX_P","SBOX_MASK","exchangeLR","offset","mask","t","_lBlock","_rBlock","exchangeRL","DESAlgo","_doReset","key","_key","keyWords","words","keyBits","i","keyBitPos","_subKeys","subKeys","nSubKey","subKey","bitShift","_invSubKeys","invSubKeys","encryptBlock","M","_doCryptBlock","decryptBlock","_M","call","round","lBlock","rBlock","f","keySize","ivSize","blockSize","DES","_createHelper","TripleDESAlgo","length","Error","key1","slice","key2","key3","_des1","createEncryptor","create","_des2","_des3","TripleDES"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/tripledes.js"],"sourcesContent":["import {\n  WordArray,\n} from './core.js';\nimport {\n  BlockCipher,\n} from './cipher-core.js';\n\n// Permuted Choice 1 constants\nconst PC1 = [\n  57, 49, 41, 33, 25, 17, 9, 1,\n  58, 50, 42, 34, 26, 18, 10, 2,\n  59, 51, 43, 35, 27, 19, 11, 3,\n  60, 52, 44, 36, 63, 55, 47, 39,\n  31, 23, 15, 7, 62, 54, 46, 38,\n  30, 22, 14, 6, 61, 53, 45, 37,\n  29, 21, 13, 5, 28, 20, 12, 4,\n];\n\n// Permuted Choice 2 constants\nconst PC2 = [\n  14, 17, 11, 24, 1, 5,\n  3, 28, 15, 6, 21, 10,\n  23, 19, 12, 4, 26, 8,\n  16, 7, 27, 20, 13, 2,\n  41, 52, 31, 37, 47, 55,\n  30, 40, 51, 45, 33, 48,\n  44, 49, 39, 56, 34, 53,\n  46, 42, 50, 36, 29, 32,\n];\n\n// Cumulative bit shift constants\nconst BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n// SBOXes and round permutation constants\nconst SBOX_P = [\n  {\n    0x0: 0x808200,\n    0x10000000: 0x8000,\n    0x20000000: 0x808002,\n    0x30000000: 0x2,\n    0x40000000: 0x200,\n    0x50000000: 0x808202,\n    0x60000000: 0x800202,\n    0x70000000: 0x800000,\n    0x80000000: 0x202,\n    0x90000000: 0x800200,\n    0xa0000000: 0x8200,\n    0xb0000000: 0x808000,\n    0xc0000000: 0x8002,\n    0xd0000000: 0x800002,\n    0xe0000000: 0x0,\n    0xf0000000: 0x8202,\n    0x8000000: 0x0,\n    0x18000000: 0x808202,\n    0x28000000: 0x8202,\n    0x38000000: 0x8000,\n    0x48000000: 0x808200,\n    0x58000000: 0x200,\n    0x68000000: 0x808002,\n    0x78000000: 0x2,\n    0x88000000: 0x800200,\n    0x98000000: 0x8200,\n    0xa8000000: 0x808000,\n    0xb8000000: 0x800202,\n    0xc8000000: 0x800002,\n    0xd8000000: 0x8002,\n    0xe8000000: 0x202,\n    0xf8000000: 0x800000,\n    0x1: 0x8000,\n    0x10000001: 0x2,\n    0x20000001: 0x808200,\n    0x30000001: 0x800000,\n    0x40000001: 0x808002,\n    0x50000001: 0x8200,\n    0x60000001: 0x200,\n    0x70000001: 0x800202,\n    0x80000001: 0x808202,\n    0x90000001: 0x808000,\n    0xa0000001: 0x800002,\n    0xb0000001: 0x8202,\n    0xc0000001: 0x202,\n    0xd0000001: 0x800200,\n    0xe0000001: 0x8002,\n    0xf0000001: 0x0,\n    0x8000001: 0x808202,\n    0x18000001: 0x808000,\n    0x28000001: 0x800000,\n    0x38000001: 0x200,\n    0x48000001: 0x8000,\n    0x58000001: 0x800002,\n    0x68000001: 0x2,\n    0x78000001: 0x8202,\n    0x88000001: 0x8002,\n    0x98000001: 0x800202,\n    0xa8000001: 0x202,\n    0xb8000001: 0x808200,\n    0xc8000001: 0x800200,\n    0xd8000001: 0x0,\n    0xe8000001: 0x8200,\n    0xf8000001: 0x808002,\n  },\n  {\n    0x0: 0x40084010,\n    0x1000000: 0x4000,\n    0x2000000: 0x80000,\n    0x3000000: 0x40080010,\n    0x4000000: 0x40000010,\n    0x5000000: 0x40084000,\n    0x6000000: 0x40004000,\n    0x7000000: 0x10,\n    0x8000000: 0x84000,\n    0x9000000: 0x40004010,\n    0xa000000: 0x40000000,\n    0xb000000: 0x84010,\n    0xc000000: 0x80010,\n    0xd000000: 0x0,\n    0xe000000: 0x4010,\n    0xf000000: 0x40080000,\n    0x800000: 0x40004000,\n    0x1800000: 0x84010,\n    0x2800000: 0x10,\n    0x3800000: 0x40004010,\n    0x4800000: 0x40084010,\n    0x5800000: 0x40000000,\n    0x6800000: 0x80000,\n    0x7800000: 0x40080010,\n    0x8800000: 0x80010,\n    0x9800000: 0x0,\n    0xa800000: 0x4000,\n    0xb800000: 0x40080000,\n    0xc800000: 0x40000010,\n    0xd800000: 0x84000,\n    0xe800000: 0x40084000,\n    0xf800000: 0x4010,\n    0x10000000: 0x0,\n    0x11000000: 0x40080010,\n    0x12000000: 0x40004010,\n    0x13000000: 0x40084000,\n    0x14000000: 0x40080000,\n    0x15000000: 0x10,\n    0x16000000: 0x84010,\n    0x17000000: 0x4000,\n    0x18000000: 0x4010,\n    0x19000000: 0x80000,\n    0x1a000000: 0x80010,\n    0x1b000000: 0x40000010,\n    0x1c000000: 0x84000,\n    0x1d000000: 0x40004000,\n    0x1e000000: 0x40000000,\n    0x1f000000: 0x40084010,\n    0x10800000: 0x84010,\n    0x11800000: 0x80000,\n    0x12800000: 0x40080000,\n    0x13800000: 0x4000,\n    0x14800000: 0x40004000,\n    0x15800000: 0x40084010,\n    0x16800000: 0x10,\n    0x17800000: 0x40000000,\n    0x18800000: 0x40084000,\n    0x19800000: 0x40000010,\n    0x1a800000: 0x40004010,\n    0x1b800000: 0x80010,\n    0x1c800000: 0x0,\n    0x1d800000: 0x4010,\n    0x1e800000: 0x40080010,\n    0x1f800000: 0x84000,\n  },\n  {\n    0x0: 0x104,\n    0x100000: 0x0,\n    0x200000: 0x4000100,\n    0x300000: 0x10104,\n    0x400000: 0x10004,\n    0x500000: 0x4000004,\n    0x600000: 0x4010104,\n    0x700000: 0x4010000,\n    0x800000: 0x4000000,\n    0x900000: 0x4010100,\n    0xa00000: 0x10100,\n    0xb00000: 0x4010004,\n    0xc00000: 0x4000104,\n    0xd00000: 0x10000,\n    0xe00000: 0x4,\n    0xf00000: 0x100,\n    0x80000: 0x4010100,\n    0x180000: 0x4010004,\n    0x280000: 0x0,\n    0x380000: 0x4000100,\n    0x480000: 0x4000004,\n    0x580000: 0x10000,\n    0x680000: 0x10004,\n    0x780000: 0x104,\n    0x880000: 0x4,\n    0x980000: 0x100,\n    0xa80000: 0x4010000,\n    0xb80000: 0x10104,\n    0xc80000: 0x10100,\n    0xd80000: 0x4000104,\n    0xe80000: 0x4010104,\n    0xf80000: 0x4000000,\n    0x1000000: 0x4010100,\n    0x1100000: 0x10004,\n    0x1200000: 0x10000,\n    0x1300000: 0x4000100,\n    0x1400000: 0x100,\n    0x1500000: 0x4010104,\n    0x1600000: 0x4000004,\n    0x1700000: 0x0,\n    0x1800000: 0x4000104,\n    0x1900000: 0x4000000,\n    0x1a00000: 0x4,\n    0x1b00000: 0x10100,\n    0x1c00000: 0x4010000,\n    0x1d00000: 0x104,\n    0x1e00000: 0x10104,\n    0x1f00000: 0x4010004,\n    0x1080000: 0x4000000,\n    0x1180000: 0x104,\n    0x1280000: 0x4010100,\n    0x1380000: 0x0,\n    0x1480000: 0x10004,\n    0x1580000: 0x4000100,\n    0x1680000: 0x100,\n    0x1780000: 0x4010004,\n    0x1880000: 0x10000,\n    0x1980000: 0x4010104,\n    0x1a80000: 0x10104,\n    0x1b80000: 0x4000004,\n    0x1c80000: 0x4000104,\n    0x1d80000: 0x4010000,\n    0x1e80000: 0x4,\n    0x1f80000: 0x10100,\n  },\n  {\n    0x0: 0x80401000,\n    0x10000: 0x80001040,\n    0x20000: 0x401040,\n    0x30000: 0x80400000,\n    0x40000: 0x0,\n    0x50000: 0x401000,\n    0x60000: 0x80000040,\n    0x70000: 0x400040,\n    0x80000: 0x80000000,\n    0x90000: 0x400000,\n    0xa0000: 0x40,\n    0xb0000: 0x80001000,\n    0xc0000: 0x80400040,\n    0xd0000: 0x1040,\n    0xe0000: 0x1000,\n    0xf0000: 0x80401040,\n    0x8000: 0x80001040,\n    0x18000: 0x40,\n    0x28000: 0x80400040,\n    0x38000: 0x80001000,\n    0x48000: 0x401000,\n    0x58000: 0x80401040,\n    0x68000: 0x0,\n    0x78000: 0x80400000,\n    0x88000: 0x1000,\n    0x98000: 0x80401000,\n    0xa8000: 0x400000,\n    0xb8000: 0x1040,\n    0xc8000: 0x80000000,\n    0xd8000: 0x400040,\n    0xe8000: 0x401040,\n    0xf8000: 0x80000040,\n    0x100000: 0x400040,\n    0x110000: 0x401000,\n    0x120000: 0x80000040,\n    0x130000: 0x0,\n    0x140000: 0x1040,\n    0x150000: 0x80400040,\n    0x160000: 0x80401000,\n    0x170000: 0x80001040,\n    0x180000: 0x80401040,\n    0x190000: 0x80000000,\n    0x1a0000: 0x80400000,\n    0x1b0000: 0x401040,\n    0x1c0000: 0x80001000,\n    0x1d0000: 0x400000,\n    0x1e0000: 0x40,\n    0x1f0000: 0x1000,\n    0x108000: 0x80400000,\n    0x118000: 0x80401040,\n    0x128000: 0x0,\n    0x138000: 0x401000,\n    0x148000: 0x400040,\n    0x158000: 0x80000000,\n    0x168000: 0x80001040,\n    0x178000: 0x40,\n    0x188000: 0x80000040,\n    0x198000: 0x1000,\n    0x1a8000: 0x80001000,\n    0x1b8000: 0x80400040,\n    0x1c8000: 0x1040,\n    0x1d8000: 0x80401000,\n    0x1e8000: 0x400000,\n    0x1f8000: 0x401040,\n  },\n  {\n    0x0: 0x80,\n    0x1000: 0x1040000,\n    0x2000: 0x40000,\n    0x3000: 0x20000000,\n    0x4000: 0x20040080,\n    0x5000: 0x1000080,\n    0x6000: 0x21000080,\n    0x7000: 0x40080,\n    0x8000: 0x1000000,\n    0x9000: 0x20040000,\n    0xa000: 0x20000080,\n    0xb000: 0x21040080,\n    0xc000: 0x21040000,\n    0xd000: 0x0,\n    0xe000: 0x1040080,\n    0xf000: 0x21000000,\n    0x800: 0x1040080,\n    0x1800: 0x21000080,\n    0x2800: 0x80,\n    0x3800: 0x1040000,\n    0x4800: 0x40000,\n    0x5800: 0x20040080,\n    0x6800: 0x21040000,\n    0x7800: 0x20000000,\n    0x8800: 0x20040000,\n    0x9800: 0x0,\n    0xa800: 0x21040080,\n    0xb800: 0x1000080,\n    0xc800: 0x20000080,\n    0xd800: 0x21000000,\n    0xe800: 0x1000000,\n    0xf800: 0x40080,\n    0x10000: 0x40000,\n    0x11000: 0x80,\n    0x12000: 0x20000000,\n    0x13000: 0x21000080,\n    0x14000: 0x1000080,\n    0x15000: 0x21040000,\n    0x16000: 0x20040080,\n    0x17000: 0x1000000,\n    0x18000: 0x21040080,\n    0x19000: 0x21000000,\n    0x1a000: 0x1040000,\n    0x1b000: 0x20040000,\n    0x1c000: 0x40080,\n    0x1d000: 0x20000080,\n    0x1e000: 0x0,\n    0x1f000: 0x1040080,\n    0x10800: 0x21000080,\n    0x11800: 0x1000000,\n    0x12800: 0x1040000,\n    0x13800: 0x20040080,\n    0x14800: 0x20000000,\n    0x15800: 0x1040080,\n    0x16800: 0x80,\n    0x17800: 0x21040000,\n    0x18800: 0x40080,\n    0x19800: 0x21040080,\n    0x1a800: 0x0,\n    0x1b800: 0x21000000,\n    0x1c800: 0x1000080,\n    0x1d800: 0x40000,\n    0x1e800: 0x20040000,\n    0x1f800: 0x20000080,\n  },\n  {\n    0x0: 0x10000008,\n    0x100: 0x2000,\n    0x200: 0x10200000,\n    0x300: 0x10202008,\n    0x400: 0x10002000,\n    0x500: 0x200000,\n    0x600: 0x200008,\n    0x700: 0x10000000,\n    0x800: 0x0,\n    0x900: 0x10002008,\n    0xa00: 0x202000,\n    0xb00: 0x8,\n    0xc00: 0x10200008,\n    0xd00: 0x202008,\n    0xe00: 0x2008,\n    0xf00: 0x10202000,\n    0x80: 0x10200000,\n    0x180: 0x10202008,\n    0x280: 0x8,\n    0x380: 0x200000,\n    0x480: 0x202008,\n    0x580: 0x10000008,\n    0x680: 0x10002000,\n    0x780: 0x2008,\n    0x880: 0x200008,\n    0x980: 0x2000,\n    0xa80: 0x10002008,\n    0xb80: 0x10200008,\n    0xc80: 0x0,\n    0xd80: 0x10202000,\n    0xe80: 0x202000,\n    0xf80: 0x10000000,\n    0x1000: 0x10002000,\n    0x1100: 0x10200008,\n    0x1200: 0x10202008,\n    0x1300: 0x2008,\n    0x1400: 0x200000,\n    0x1500: 0x10000000,\n    0x1600: 0x10000008,\n    0x1700: 0x202000,\n    0x1800: 0x202008,\n    0x1900: 0x0,\n    0x1a00: 0x8,\n    0x1b00: 0x10200000,\n    0x1c00: 0x2000,\n    0x1d00: 0x10002008,\n    0x1e00: 0x10202000,\n    0x1f00: 0x200008,\n    0x1080: 0x8,\n    0x1180: 0x202000,\n    0x1280: 0x200000,\n    0x1380: 0x10000008,\n    0x1480: 0x10002000,\n    0x1580: 0x2008,\n    0x1680: 0x10202008,\n    0x1780: 0x10200000,\n    0x1880: 0x10202000,\n    0x1980: 0x10200008,\n    0x1a80: 0x2000,\n    0x1b80: 0x202008,\n    0x1c80: 0x200008,\n    0x1d80: 0x0,\n    0x1e80: 0x10000000,\n    0x1f80: 0x10002008,\n  },\n  {\n    0x0: 0x100000,\n    0x10: 0x2000401,\n    0x20: 0x400,\n    0x30: 0x100401,\n    0x40: 0x2100401,\n    0x50: 0x0,\n    0x60: 0x1,\n    0x70: 0x2100001,\n    0x80: 0x2000400,\n    0x90: 0x100001,\n    0xa0: 0x2000001,\n    0xb0: 0x2100400,\n    0xc0: 0x2100000,\n    0xd0: 0x401,\n    0xe0: 0x100400,\n    0xf0: 0x2000000,\n    0x8: 0x2100001,\n    0x18: 0x0,\n    0x28: 0x2000401,\n    0x38: 0x2100400,\n    0x48: 0x100000,\n    0x58: 0x2000001,\n    0x68: 0x2000000,\n    0x78: 0x401,\n    0x88: 0x100401,\n    0x98: 0x2000400,\n    0xa8: 0x2100000,\n    0xb8: 0x100001,\n    0xc8: 0x400,\n    0xd8: 0x2100401,\n    0xe8: 0x1,\n    0xf8: 0x100400,\n    0x100: 0x2000000,\n    0x110: 0x100000,\n    0x120: 0x2000401,\n    0x130: 0x2100001,\n    0x140: 0x100001,\n    0x150: 0x2000400,\n    0x160: 0x2100400,\n    0x170: 0x100401,\n    0x180: 0x401,\n    0x190: 0x2100401,\n    0x1a0: 0x100400,\n    0x1b0: 0x1,\n    0x1c0: 0x0,\n    0x1d0: 0x2100000,\n    0x1e0: 0x2000001,\n    0x1f0: 0x400,\n    0x108: 0x100400,\n    0x118: 0x2000401,\n    0x128: 0x2100001,\n    0x138: 0x1,\n    0x148: 0x2000000,\n    0x158: 0x100000,\n    0x168: 0x401,\n    0x178: 0x2100400,\n    0x188: 0x2000001,\n    0x198: 0x2100000,\n    0x1a8: 0x0,\n    0x1b8: 0x2100401,\n    0x1c8: 0x100401,\n    0x1d8: 0x400,\n    0x1e8: 0x2000400,\n    0x1f8: 0x100001,\n  },\n  {\n    0x0: 0x8000820,\n    0x1: 0x20000,\n    0x2: 0x8000000,\n    0x3: 0x20,\n    0x4: 0x20020,\n    0x5: 0x8020820,\n    0x6: 0x8020800,\n    0x7: 0x800,\n    0x8: 0x8020000,\n    0x9: 0x8000800,\n    0xa: 0x20800,\n    0xb: 0x8020020,\n    0xc: 0x820,\n    0xd: 0x0,\n    0xe: 0x8000020,\n    0xf: 0x20820,\n    0x80000000: 0x800,\n    0x80000001: 0x8020820,\n    0x80000002: 0x8000820,\n    0x80000003: 0x8000000,\n    0x80000004: 0x8020000,\n    0x80000005: 0x20800,\n    0x80000006: 0x20820,\n    0x80000007: 0x20,\n    0x80000008: 0x8000020,\n    0x80000009: 0x820,\n    0x8000000a: 0x20020,\n    0x8000000b: 0x8020800,\n    0x8000000c: 0x0,\n    0x8000000d: 0x8020020,\n    0x8000000e: 0x8000800,\n    0x8000000f: 0x20000,\n    0x10: 0x20820,\n    0x11: 0x8020800,\n    0x12: 0x20,\n    0x13: 0x800,\n    0x14: 0x8000800,\n    0x15: 0x8000020,\n    0x16: 0x8020020,\n    0x17: 0x20000,\n    0x18: 0x0,\n    0x19: 0x20020,\n    0x1a: 0x8020000,\n    0x1b: 0x8000820,\n    0x1c: 0x8020820,\n    0x1d: 0x20800,\n    0x1e: 0x820,\n    0x1f: 0x8000000,\n    0x80000010: 0x20000,\n    0x80000011: 0x800,\n    0x80000012: 0x8020020,\n    0x80000013: 0x20820,\n    0x80000014: 0x20,\n    0x80000015: 0x8020000,\n    0x80000016: 0x8000000,\n    0x80000017: 0x8000820,\n    0x80000018: 0x8020820,\n    0x80000019: 0x8000020,\n    0x8000001a: 0x8000800,\n    0x8000001b: 0x0,\n    0x8000001c: 0x20800,\n    0x8000001d: 0x820,\n    0x8000001e: 0x20020,\n    0x8000001f: 0x8020800,\n  },\n];\n\n// Masks that select the SBOX input\nconst SBOX_MASK = [\n  0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n  0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f,\n];\n\n// Swap bits across the left and right words\nfunction exchangeLR(offset, mask) {\n  const t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n  this._rBlock ^= t;\n  this._lBlock ^= t << offset;\n}\n\nfunction exchangeRL(offset, mask) {\n  const t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n  this._lBlock ^= t;\n  this._rBlock ^= t << offset;\n}\n\n/**\n * DES block cipher algorithm.\n */\nexport class DESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n\n    // Select 56 bits according to PC1\n    const keyBits = [];\n    for (let i = 0; i < 56; i += 1) {\n      const keyBitPos = PC1[i] - 1;\n      keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - (keyBitPos % 32))) & 1;\n    }\n\n    // Assemble 16 subkeys\n    this._subKeys = [];\n    const subKeys = this._subKeys;\n    for (let nSubKey = 0; nSubKey < 16; nSubKey += 1) {\n      // Create subkey\n      subKeys[nSubKey] = [];\n      const subKey = subKeys[nSubKey];\n\n      // Shortcut\n      const bitShift = BIT_SHIFTS[nSubKey];\n\n      // Select 48 bits according to PC2\n      for (let i = 0; i < 24; i += 1) {\n        // Select from the left 28 key bits\n        subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - (i % 6));\n\n        // Select from the right 28 key bits\n        subKey[4 + ((i / 6) | 0)]\n          |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)]\n          << (31 - (i % 6));\n      }\n\n      // Since each subkey is applied to an expanded 32-bit input,\n      // the subkey can be broken into 8 values scaled to 32-bits,\n      // which allows the key to be used without expansion\n      subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n      for (let i = 1; i < 7; i += 1) {\n        subKey[i] >>>= ((i - 1) * 4 + 3);\n      }\n      subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n    }\n\n    // Compute inverse subkeys\n    this._invSubKeys = [];\n    const invSubKeys = this._invSubKeys;\n    for (let i = 0; i < 16; i += 1) {\n      invSubKeys[i] = subKeys[15 - i];\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._subKeys);\n  }\n\n  decryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._invSubKeys);\n  }\n\n  _doCryptBlock(M, offset, subKeys) {\n    const _M = M;\n\n    // Get input\n    this._lBlock = M[offset];\n    this._rBlock = M[offset + 1];\n\n    // Initial permutation\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeLR.call(this, 1, 0x55555555);\n\n    // Rounds\n    for (let round = 0; round < 16; round += 1) {\n      // Shortcuts\n      const subKey = subKeys[round];\n      const lBlock = this._lBlock;\n      const rBlock = this._rBlock;\n\n      // Feistel function\n      let f = 0;\n      for (let i = 0; i < 8; i += 1) {\n        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n      }\n      this._lBlock = rBlock;\n      this._rBlock = lBlock ^ f;\n    }\n\n    // Undo swap from last round\n    const t = this._lBlock;\n    this._lBlock = this._rBlock;\n    this._rBlock = t;\n\n    // Final permutation\n    exchangeLR.call(this, 1, 0x55555555);\n    exchangeRL.call(this, 8, 0x00ff00ff);\n    exchangeRL.call(this, 2, 0x33333333);\n    exchangeLR.call(this, 16, 0x0000ffff);\n    exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n    // Set output\n    _M[offset] = this._lBlock;\n    _M[offset + 1] = this._rBlock;\n  }\n}\nDESAlgo.keySize = 64 / 32;\nDESAlgo.ivSize = 64 / 32;\nDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n */\nexport const DES = BlockCipher._createHelper(DESAlgo);\n\n/**\n * Triple-DES block cipher algorithm.\n */\nexport class TripleDESAlgo extends BlockCipher {\n  _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    // Make sure the key length is valid (64, 128 or >= 192 bit)\n    if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n      throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n    }\n\n    // Extend the key according to the keying options defined in 3DES standard\n    const key1 = keyWords.slice(0, 2);\n    const key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n    const key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n    // Create DES instances\n    this._des1 = DESAlgo.createEncryptor(WordArray.create(key1));\n    this._des2 = DESAlgo.createEncryptor(WordArray.create(key2));\n    this._des3 = DESAlgo.createEncryptor(WordArray.create(key3));\n  }\n\n  encryptBlock(M, offset) {\n    this._des1.encryptBlock(M, offset);\n    this._des2.decryptBlock(M, offset);\n    this._des3.encryptBlock(M, offset);\n  }\n\n  decryptBlock(M, offset) {\n    this._des3.decryptBlock(M, offset);\n    this._des2.encryptBlock(M, offset);\n    this._des1.decryptBlock(M, offset);\n  }\n}\nTripleDESAlgo.keySize = 192 / 32;\nTripleDESAlgo.ivSize = 64 / 32;\nTripleDESAlgo.blockSize = 64 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n */\nexport const TripleDES = BlockCipher._createHelper(TripleDESAlgo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}