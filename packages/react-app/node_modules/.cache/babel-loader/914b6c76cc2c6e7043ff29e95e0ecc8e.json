{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/packages/react-app/src/components/CellsComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CellsComponent(props) {\n  _s();\n  const hash = props.hash;\n  let [svg, setSVG] = useState(null);\n  if (props.ACSigner !== null) {\n    async function c() {\n      const blob = await props.ACSigner.tokenURI(hash);\n      const response = await fetch(blob); // parses base64 encoded blob to an HTML response\n      const metadata = await response.json(); // parse HTML response to JSON form\n      const imageResponse = await fetch(metadata.image);\n      const s = await imageResponse.text();\n      setSVG(s);\n    }\n    c();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: svg\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(CellsComponent, \"Z+f9UvOitFCp1Ct5AXke8UWJygw=\");\n_c = CellsComponent;\nexport default CellsComponent;\nvar _c;\n$RefreshReg$(_c, \"CellsComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CellsComponent","props","_s","hash","svg","setSVG","ACSigner","c","blob","tokenURI","response","fetch","metadata","json","imageResponse","image","s","text","style","display","justifyContent","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/packages/react-app/src/components/CellsComponent.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nfunction CellsComponent(props) {\n    const hash = props.hash;\n    let [svg, setSVG] = useState(null);\n\n    if (props.ACSigner !== null) { \n        async function c() {\n            const blob = await props.ACSigner.tokenURI(hash);\n            const response = await fetch(blob); // parses base64 encoded blob to an HTML response\n            const metadata = await response.json(); // parse HTML response to JSON form\n            const imageResponse = await fetch(metadata.image);\n            const s = await imageResponse.text();\n            setSVG(s);\n        }\n        c();\n    }\n\n\n    return (\n        <div style={{display:\"flex\", justifyContent:\"center\"}} \n            dangerouslySetInnerHTML={{ __html: svg}}    \n        >\n        </div>\n    );\n}\n\nexport default CellsComponent\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,cAAcA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC3B,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI;EACvB,IAAI,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAElC,IAAII,KAAK,CAACK,QAAQ,KAAK,IAAI,EAAE;IACzB,eAAeC,CAACA,CAAA,EAAG;MACf,MAAMC,IAAI,GAAG,MAAMP,KAAK,CAACK,QAAQ,CAACG,QAAQ,CAACN,IAAI,CAAC;MAChD,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;MACpC,MAAMI,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,CAAC,CAAC;MACxC,MAAMC,aAAa,GAAG,MAAMH,KAAK,CAACC,QAAQ,CAACG,KAAK,CAAC;MACjD,MAAMC,CAAC,GAAG,MAAMF,aAAa,CAACG,IAAI,EAAE;MACpCZ,MAAM,CAACW,CAAC,CAAC;IACb;IACAT,CAAC,EAAE;EACP;EAGA,oBACIR,OAAA;IAAKmB,KAAK,EAAE;MAACC,OAAO,EAAC,MAAM;MAAEC,cAAc,EAAC;IAAQ,CAAE;IAClDC,uBAAuB,EAAE;MAAEC,MAAM,EAAElB;IAAG;EAAE;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEtC;AAEd;AAACxB,EAAA,CAvBQF,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAyBvB,eAAeA,cAAc;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}