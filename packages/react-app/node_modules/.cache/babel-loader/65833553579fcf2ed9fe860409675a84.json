{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/packages/react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { Account } from \"./components\";\nimport IntroPage from './components/IntroPage.js';\nimport StatsPage from './components/StatsPage.js';\nimport { usePoller } from \"./hooks\";\nimport Transactor from \"./helpers/Transactor.js\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\n// Artifacts\nimport ACJSON from \"./contracts/AnchorCertificates.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /* Universal State*/\n  const [address, setAddress] = useState();\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [minting, setMinting] = useState(false); // whether something is minting or not\n\n  // chain ids (used as proxy for being connect to a provider)\n  const [tokenId, setTokenId] = useState(0); // token Id to display\n  const [injectedChainId, setInjectedChainId] = useState(null);\n  const [hardcodedChainId, setHardcodedChainId] = useState(null); // set it manually\n\n  let ACAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // mainnet\n\n  let dfPrice = \"0.01\"; // ~$20 @ 2000/ETH\n  let dxPrice = \"0.05\"; // ~$100 @ 2000/ETH\n\n  const [ACSigner, setACSigner] = useState(null);\n\n  // NOTE: Currently not being used in Transactor, but keeping it in the code in case I want to turn it back on.\n  // Currently, it's expected that the web3 provider sets it (eg, MetaMask fills it in).\n  // const gasPrice = useGasPrice(\"fast\"); \n  const gasPrice = 0;\n  usePoller(() => {\n    pollInjectedProvider();\n  }, 1999);\n  async function pollInjectedProvider() {\n    if (!injectedChainId) {\n      if (injectedProvider && injectedProvider.network) {\n        const id = await injectedProvider.network.chainId;\n        setInjectedChainId(id);\n\n        // comment out line for local or prod\n        setHardcodedChainId(43113); // mainnet\n        // setHardcodedChainId(4); // rinkeby\n        // setHardcodedChainId(id); // local (uses injectedProvider)\n      }\n    }\n  }\n\n  // load signers if there's an injected provider\n  useEffect(() => {\n    async function loadSigners() {\n      if (injectedChainId !== null) {\n        const signer = await injectedProvider.getSigner();\n        const ACSigner = new ethers.Contract(ACAddress, ACJSON.abi, signer);\n        setACSigner(ACSigner);\n      }\n    }\n    loadSigners();\n  }, [injectedChainId]);\n  async function mintAnchorCertificate(type) {\n    let val;\n    if (type === \"default\") {\n      val = ethers.utils.parseEther(dfPrice);\n    }\n    if (type === \"deluxe\") {\n      val = ethers.utils.parseEther(dxPrice);\n    }\n    const tx = Transactor(injectedProvider, gasPrice);\n    setMinting(true);\n    tx(ACSigner.functions.mintCertificate({\n      value: val\n    }), async function (update) {\n      /*Used for testing UI*/\n      // await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(update);\n      console.log(update.eventCode);\n      if (update.eventCode === \"txConfirmed\" || update.confirmations === 1) {\n        const txResponse = await injectedProvider.getTransaction(update.hash);\n        console.log(txResponse);\n        const receipt = await txResponse.wait();\n        console.log(receipt);\n        const tokenId = receipt.logs[0].topics[3];\n        setTokenId(tokenId);\n        setMinting(false);\n      }\n\n      /* if user denies tx */\n      if (update.code !== undefined) {\n        if (update.code === 4001) {\n          setMinting(false);\n        }\n      }\n    });\n  }\n\n  // mainnet\n  const graphURI = 'https://api.thegraph.com/subgraphs/name/simondlr/tlatc';\n  // const graphURI = 'http://localhost:8000/subgraphs/name/simondlr/neolastics-subgraph';\n\n  const client = new ApolloClient({\n    uri: graphURI,\n    cache: new InMemoryCache()\n  });\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Account, {\n        address: address,\n        setAddress: setAddress,\n        injectedProvider: injectedProvider,\n        setInjectedProvider: setInjectedProvider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(IntroPage, {\n            address: address,\n            ACSigner: ACSigner,\n            injectedChainId: injectedChainId,\n            hardcodedChainId: hardcodedChainId,\n            mintAnchorCertificate: mintAnchorCertificate,\n            tokenId: tokenId,\n            minting: minting,\n            dfPrice: dfPrice,\n            dxPrice: dxPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/stats\",\n          children: /*#__PURE__*/_jsxDEV(StatsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DLmYcnPjbWDgaASVTgBfNPZoQyA=\", false, function () {\n  return [usePoller];\n});\n_c = App;\nclass AppRoutes extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:page\",\n          children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AppRoutes;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Component","BrowserRouter","Router","Route","Switch","ethers","Account","IntroPage","StatsPage","usePoller","Transactor","ApolloClient","ApolloProvider","InMemoryCache","ACJSON","jsxDEV","_jsxDEV","App","_s","address","setAddress","injectedProvider","setInjectedProvider","minting","setMinting","tokenId","setTokenId","injectedChainId","setInjectedChainId","hardcodedChainId","setHardcodedChainId","ACAddress","dfPrice","dxPrice","ACSigner","setACSigner","gasPrice","pollInjectedProvider","network","id","chainId","loadSigners","signer","getSigner","Contract","abi","mintAnchorCertificate","type","val","utils","parseEther","tx","functions","mintCertificate","value","update","console","log","eventCode","confirmations","txResponse","getTransaction","hash","receipt","wait","logs","topics","code","undefined","graphURI","client","uri","cache","children","fileName","_jsxFileName","lineNumber","columnNumber","exact","path","_c","AppRoutes","render","$RefreshReg$"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/packages/react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { Account } from \"./components\"\n\nimport IntroPage from './components/IntroPage.js';\nimport StatsPage from './components/StatsPage.js';\n\nimport { usePoller } from \"./hooks\";\n\nimport Transactor from \"./helpers/Transactor.js\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\n// Artifacts\nimport ACJSON from \"./contracts/AnchorCertificates.json\";\n\nfunction App() {\n  /* Universal State*/\n  const [address, setAddress] = useState();\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [minting, setMinting] = useState(false); // whether something is minting or not\n\n  // chain ids (used as proxy for being connect to a provider)\n  const [tokenId, setTokenId] = useState(0); // token Id to display\n  const [injectedChainId, setInjectedChainId] = useState(null);\n  const [hardcodedChainId, setHardcodedChainId] = useState(null); // set it manually\n\n  let ACAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // mainnet\n\n  let dfPrice = \"0.01\"; // ~$20 @ 2000/ETH\n  let dxPrice = \"0.05\"; // ~$100 @ 2000/ETH\n\n  const [ACSigner, setACSigner] = useState(null);\n\n  // NOTE: Currently not being used in Transactor, but keeping it in the code in case I want to turn it back on.\n  // Currently, it's expected that the web3 provider sets it (eg, MetaMask fills it in).\n  // const gasPrice = useGasPrice(\"fast\"); \n  const gasPrice = 0;\n\n  usePoller(() => { pollInjectedProvider() }, 1999);\n\n  async function pollInjectedProvider() {\n    if (!injectedChainId) {\n      if (injectedProvider && injectedProvider.network) {\n        const id = await injectedProvider.network.chainId;\n        setInjectedChainId(id);\n\n        // comment out line for local or prod\n        setHardcodedChainId(43113); // mainnet\n        // setHardcodedChainId(4); // rinkeby\n        // setHardcodedChainId(id); // local (uses injectedProvider)\n\n      }\n    }\n  }\n\n  // load signers if there's an injected provider\n  useEffect(() => {\n    async function loadSigners() {\n      if (injectedChainId !== null) {\n        const signer = await injectedProvider.getSigner();\n        const ACSigner = new ethers.Contract(ACAddress, ACJSON.abi, signer);\n        setACSigner(ACSigner);\n      }\n    }\n    loadSigners();\n  }, [injectedChainId]);\n\n\n  async function mintAnchorCertificate(type) {\n    let val;\n    if (type === \"default\") { val = ethers.utils.parseEther(dfPrice); }\n    if (type === \"deluxe\") { val = ethers.utils.parseEther(dxPrice); }\n    const tx = Transactor(injectedProvider, gasPrice);\n    setMinting(true);\n    tx(ACSigner.functions.mintCertificate({ value: val }), async function (update) {\n      /*Used for testing UI*/\n      // await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(update);\n      console.log(update.eventCode);\n      if (update.eventCode === \"txConfirmed\" || update.confirmations === 1) {\n        const txResponse = await injectedProvider.getTransaction(update.hash);\n        console.log(txResponse);\n        const receipt = await txResponse.wait();\n        console.log(receipt);\n        const tokenId = receipt.logs[0].topics[3];\n        setTokenId(tokenId);\n        setMinting(false);\n      }\n\n      /* if user denies tx */\n      if (update.code !== undefined) {\n        if (update.code === 4001) {\n          setMinting(false);\n        }\n      }\n    });\n  }\n\n  // mainnet\n  const graphURI = 'https://api.thegraph.com/subgraphs/name/simondlr/tlatc';\n  // const graphURI = 'http://localhost:8000/subgraphs/name/simondlr/neolastics-subgraph';\n\n  const client = new ApolloClient({\n    uri: graphURI,\n    cache: new InMemoryCache(),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Account\n          address={address}\n          setAddress={setAddress}\n          injectedProvider={injectedProvider}\n          setInjectedProvider={setInjectedProvider}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <IntroPage\n              address={address}\n              ACSigner={ACSigner}\n              injectedChainId={injectedChainId}\n              hardcodedChainId={hardcodedChainId}\n              mintAnchorCertificate={mintAnchorCertificate}\n              tokenId={tokenId}\n              minting={minting}\n              dfPrice={dfPrice}\n              dxPrice={dxPrice}\n            />\n          </Route>\n          <Route path=\"/stats\">\n            <StatsPage\n            />\n          </Route>\n        </Switch>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nclass AppRoutes extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/:page'>\n            <App />\n          </Route>\n          <Route exact path='/'>\n            <App />\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default AppRoutes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}