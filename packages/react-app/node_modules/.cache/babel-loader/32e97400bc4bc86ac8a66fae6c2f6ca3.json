{"ast":null,"code":"import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\nconst DEBUG = true;\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: '8e383acf-9eee-422a-a01d-fa1baa1a29e0',\n        // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        }\n      };\n      const notify = Notify(options);\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const {\n            emitter\n          } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash)\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\"\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({\n                  ...txResult,\n                  ...currentTransactionReceipt\n                });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n        if (typeof result.wait === \"function\") {\n          console.log('waited');\n          await result.wait();\n        }\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n_c = Transactor;\nvar _c;\n$RefreshReg$(_c, \"Transactor\");","map":{"version":3,"names":["hexlify","parseUnits","notification","Notify","callbacks","DEBUG","Transactor","provider","gasPrice","etherscan","tx","callback","signer","getSigner","network","getNetwork","console","log","options","dappId","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","notify","etherscanNetwork","name","etherscanTxUrl","result","Promise","gasLimit","sendTransaction","indexOf","emitter","on","onclick","window","open","info","message","description","placement","txResult","listeningInterval","setInterval","currentTransactionReceipt","getTransactionReceipt","confirmations","clearInterval","wait","e","error","_c","$RefreshReg$"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/helpers/Transactor.js"],"sourcesContent":["import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true\n\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: '8e383acf-9eee-422a-a01d-fa1baa1a29e0', // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if(DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n      const notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if(DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n          if(DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if(DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          console.log('waited');\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}