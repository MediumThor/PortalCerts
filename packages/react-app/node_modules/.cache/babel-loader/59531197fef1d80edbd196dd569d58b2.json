{"ast":null,"code":"import { CipherParams } from './cipher-core.js';\nimport { Hex } from './core.js';\nexport const HexFormatter = {\n  /**\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The hexadecimally encoded string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    return cipherParams.ciphertext.toString(Hex);\n  },\n  /**\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n   *\n   * @param {string} input The hexadecimally encoded string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n   */\n  parse(input) {\n    const ciphertext = Hex.parse(input);\n    return CipherParams.create({\n      ciphertext\n    });\n  }\n};","map":{"version":3,"names":["CipherParams","Hex","HexFormatter","stringify","cipherParams","ciphertext","toString","parse","input","create"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/node_modules/crypto-es/lib/format-hex.js"],"sourcesContent":["import {\n  CipherParams,\n} from './cipher-core.js';\nimport {\n  Hex,\n} from './core.js';\n\nexport const HexFormatter = {\n  /**\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The hexadecimally encoded string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    return cipherParams.ciphertext.toString(Hex);\n  },\n\n  /**\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n   *\n   * @param {string} input The hexadecimally encoded string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n   */\n  parse(input) {\n    const ciphertext = Hex.parse(input);\n    return CipherParams.create({ ciphertext });\n  },\n};\n"],"mappings":"AAAA,SACEA,YAAY,QACP,kBAAkB;AACzB,SACEC,GAAG,QACE,WAAW;AAElB,OAAO,MAAMC,YAAY,GAAG;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAASA,CAACC,YAAY,EAAE;IACtB,OAAOA,YAAY,CAACC,UAAU,CAACC,QAAQ,CAACL,GAAG,CAAC;EAC9C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,KAAKA,CAACC,KAAK,EAAE;IACX,MAAMH,UAAU,GAAGJ,GAAG,CAACM,KAAK,CAACC,KAAK,CAAC;IACnC,OAAOR,YAAY,CAACS,MAAM,CAAC;MAAEJ;IAAW,CAAC,CAAC;EAC5C;AACF,CAAC"},"metadata":{},"sourceType":"module"}