{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nconst forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  } ///////////////////\n  // Sub-classes MAY override these\n\n\n  getBalance(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getBalance\");\n\n      return yield this.provider.getBalance(this.getAddress(), blockTag);\n    });\n  }\n\n  getTransactionCount(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getTransactionCount\");\n\n      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n    });\n  } // Populates \"from\" if unspecified, and estimates the gas for the transaction\n\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"estimateGas\");\n\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.estimateGas(tx);\n    });\n  } // Populates \"from\" if unspecified, and calls with the transaction\n\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"call\");\n\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.call(tx, blockTag);\n    });\n  } // Populates all fields in a transaction, signs it and sends it to the network\n\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"sendTransaction\");\n\n      const tx = yield this.populateTransaction(transaction);\n      const signedTx = yield this.signTransaction(tx);\n      return yield this.provider.sendTransaction(signedTx);\n    });\n  }\n\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getChainId\");\n\n      const network = yield this.provider.getNetwork();\n      return network.chainId;\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getGasPrice\");\n\n      return yield this.provider.getGasPrice();\n    });\n  }\n\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getFeeData\");\n\n      return yield this.provider.getFeeData();\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"resolveName\");\n\n      return yield this.provider.resolveName(name);\n    });\n  } // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n\n\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n\n    const tx = shallowCopy(transaction);\n\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n\n        return result[0];\n      });\n    }\n\n    return tx;\n  } // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n  //\n  // Notes:\n  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n\n\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {\n          if (to == null) {\n            return null;\n          }\n\n          const address = yield this.resolveName(to);\n\n          if (address == null) {\n            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n          }\n\n          return address;\n        })); // Prevent this error from causing an UnhandledPromiseException\n\n        tx.to.catch(error => {});\n      } // Do not allow mixing pre-eip-1559 and eip-1559 properties\n\n\n      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n\n      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n        logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n        logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n      }\n\n      if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n        // Fully-formed EIP-1559 transaction (skip getFeeData)\n        tx.type = 2;\n      } else if (tx.type === 0 || tx.type === 1) {\n        // Explicit Legacy or EIP-2930 transaction\n        // Populate missing gasPrice\n        if (tx.gasPrice == null) {\n          tx.gasPrice = this.getGasPrice();\n        }\n      } else {\n        // We need to get fee data to determine things\n        const feeData = yield this.getFeeData();\n\n        if (tx.type == null) {\n          // We need to auto-detect the intended type of this transaction...\n          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n            // The network supports EIP-1559!\n            // Upgrade transaction from null to eip-1559\n            tx.type = 2;\n\n            if (tx.gasPrice != null) {\n              // Using legacy gasPrice property on an eip-1559 network,\n              // so use gasPrice as both fee properties\n              const gasPrice = tx.gasPrice;\n              delete tx.gasPrice;\n              tx.maxFeePerGas = gasPrice;\n              tx.maxPriorityFeePerGas = gasPrice;\n            } else {\n              // Populate missing fee data\n              if (tx.maxFeePerGas == null) {\n                tx.maxFeePerGas = feeData.maxFeePerGas;\n              }\n\n              if (tx.maxPriorityFeePerGas == null) {\n                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n              }\n            }\n          } else if (feeData.gasPrice != null) {\n            // Network doesn't support EIP-1559...\n            // ...but they are trying to use EIP-1559 properties\n            if (hasEip1559) {\n              logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"populateTransaction\"\n              });\n            } // Populate missing fee data\n\n\n            if (tx.gasPrice == null) {\n              tx.gasPrice = feeData.gasPrice;\n            } // Explicitly set untyped transaction to legacy\n\n\n            tx.type = 0;\n          } else {\n            // getFeeData has failed us.\n            logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"signer.getFeeData\"\n            });\n          }\n        } else if (tx.type === 2) {\n          // Explicitly using EIP-1559\n          // Populate missing fee data\n          if (tx.maxFeePerGas == null) {\n            tx.maxFeePerGas = feeData.maxFeePerGas;\n          }\n\n          if (tx.maxPriorityFeePerGas == null) {\n            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n          }\n        }\n      }\n\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          if (forwardErrors.indexOf(error.code) >= 0) {\n            throw error;\n          }\n\n          return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            tx: tx\n          });\n        });\n      }\n\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n\n          return results[0];\n        });\n      }\n\n      return yield resolveProperties(tx);\n    });\n  } ///////////////////\n  // Sub-classes SHOULD leave these alone\n\n\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n\n  _signTypedData(domain, types, value) {\n    return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n  }\n\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n\n}","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/@ethersproject/abstract-signer/lib.esm/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","Signer","constructor","checkAbstract","new","target","getBalance","blockTag","_checkProvider","provider","getAddress","getTransactionCount","estimateGas","transaction","tx","checkTransaction","call","sendTransaction","populateTransaction","signedTx","signTransaction","getChainId","network","getNetwork","chainId","getGasPrice","getFeeData","resolveName","name","key","indexOf","throwArgumentError","from","all","toLowerCase","to","address","catch","error","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","throwError","UNSUPPORTED_OPERATION","operation","nonce","gasLimit","code","UNPREDICTABLE_GAS_LIMIT","results","isSigner","_isSigner","VoidSigner","_fail","message","signMessage","_signTypedData","domain","types","connect"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,cAAT,EAAyBC,iBAAzB,EAA4CC,WAA5C,QAA+D,2BAA/D;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,MAAME,sBAAsB,GAAG,CAC3B,YAD2B,EACb,iBADa,EACM,SADN,EACiB,YADjB,EAC+B,MAD/B,EACuC,MADvC,EAC+C,UAD/C,EAC2D,UAD3D,EACuE,cADvE,EACuF,sBADvF,EAC+G,OAD/G,EACwH,IADxH,EAC8H,MAD9H,EACsI,OADtI,CAA/B;AAGA,MAAMC,aAAa,GAAG,CAClBJ,MAAM,CAACK,MAAP,CAAcC,kBADI,EAElBN,MAAM,CAACK,MAAP,CAAcE,aAFI,EAGlBP,MAAM,CAACK,MAAP,CAAcG,uBAHI,CAAtB;AAKA;AACA;AACA,OAAO,MAAMC,MAAN,CAAa;AAChB;AACA;AACAC,EAAAA,WAAW,GAAG;AACVR,IAAAA,MAAM,CAACS,aAAP,CAAqBC,GAAG,CAACC,MAAzB,EAAiCJ,MAAjC;AACAZ,IAAAA,cAAc,CAAC,IAAD,EAAO,WAAP,EAAoB,IAApB,CAAd;AACH,GANe,CAOhB;AACA;;;AACAiB,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,WAAOrC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,YAApB;;AACA,aAAO,MAAM,KAAKC,QAAL,CAAcH,UAAd,CAAyB,KAAKI,UAAL,EAAzB,EAA4CH,QAA5C,CAAb;AACH,KAHe,CAAhB;AAIH;;AACDI,EAAAA,mBAAmB,CAACJ,QAAD,EAAW;AAC1B,WAAOrC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,qBAApB;;AACA,aAAO,MAAM,KAAKC,QAAL,CAAcE,mBAAd,CAAkC,KAAKD,UAAL,EAAlC,EAAqDH,QAArD,CAAb;AACH,KAHe,CAAhB;AAIH,GApBe,CAqBhB;;;AACAK,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,WAAO3C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,aAApB;;AACA,YAAMM,EAAE,GAAG,MAAMxB,iBAAiB,CAAC,KAAKyB,gBAAL,CAAsBF,WAAtB,CAAD,CAAlC;AACA,aAAO,MAAM,KAAKJ,QAAL,CAAcG,WAAd,CAA0BE,EAA1B,CAAb;AACH,KAJe,CAAhB;AAKH,GA5Be,CA6BhB;;;AACAE,EAAAA,IAAI,CAACH,WAAD,EAAcN,QAAd,EAAwB;AACxB,WAAOrC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,MAApB;;AACA,YAAMM,EAAE,GAAG,MAAMxB,iBAAiB,CAAC,KAAKyB,gBAAL,CAAsBF,WAAtB,CAAD,CAAlC;AACA,aAAO,MAAM,KAAKJ,QAAL,CAAcO,IAAd,CAAmBF,EAAnB,EAAuBP,QAAvB,CAAb;AACH,KAJe,CAAhB;AAKH,GApCe,CAqChB;;;AACAU,EAAAA,eAAe,CAACJ,WAAD,EAAc;AACzB,WAAO3C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,iBAApB;;AACA,YAAMM,EAAE,GAAG,MAAM,KAAKI,mBAAL,CAAyBL,WAAzB,CAAjB;AACA,YAAMM,QAAQ,GAAG,MAAM,KAAKC,eAAL,CAAqBN,EAArB,CAAvB;AACA,aAAO,MAAM,KAAKL,QAAL,CAAcQ,eAAd,CAA8BE,QAA9B,CAAb;AACH,KALe,CAAhB;AAMH;;AACDE,EAAAA,UAAU,GAAG;AACT,WAAOnD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,YAApB;;AACA,YAAMc,OAAO,GAAG,MAAM,KAAKb,QAAL,CAAcc,UAAd,EAAtB;AACA,aAAOD,OAAO,CAACE,OAAf;AACH,KAJe,CAAhB;AAKH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAOvD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,aAApB;;AACA,aAAO,MAAM,KAAKC,QAAL,CAAcgB,WAAd,EAAb;AACH,KAHe,CAAhB;AAIH;;AACDC,EAAAA,UAAU,GAAG;AACT,WAAOxD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,YAApB;;AACA,aAAO,MAAM,KAAKC,QAAL,CAAciB,UAAd,EAAb;AACH,KAHe,CAAhB;AAIH;;AACDC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,WAAO1D,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,WAAKsC,cAAL,CAAoB,aAApB;;AACA,aAAO,MAAM,KAAKC,QAAL,CAAckB,WAAd,CAA0BC,IAA1B,CAAb;AACH,KAHe,CAAhB;AAIH,GAtEe,CAuEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,EAAAA,gBAAgB,CAACF,WAAD,EAAc;AAC1B,SAAK,MAAMgB,GAAX,IAAkBhB,WAAlB,EAA+B;AAC3B,UAAIlB,sBAAsB,CAACmC,OAAvB,CAA+BD,GAA/B,MAAwC,CAAC,CAA7C,EAAgD;AAC5CnC,QAAAA,MAAM,CAACqC,kBAAP,CAA0B,8BAA8BF,GAAxD,EAA6D,aAA7D,EAA4EhB,WAA5E;AACH;AACJ;;AACD,UAAMC,EAAE,GAAGvB,WAAW,CAACsB,WAAD,CAAtB;;AACA,QAAIC,EAAE,CAACkB,IAAH,IAAW,IAAf,EAAqB;AACjBlB,MAAAA,EAAE,CAACkB,IAAH,GAAU,KAAKtB,UAAL,EAAV;AACH,KAFD,MAGK;AACD;AACAI,MAAAA,EAAE,CAACkB,IAAH,GAAUtD,OAAO,CAACuD,GAAR,CAAY,CAClBvD,OAAO,CAACD,OAAR,CAAgBqC,EAAE,CAACkB,IAAnB,CADkB,EAElB,KAAKtB,UAAL,EAFkB,CAAZ,EAGPvB,IAHO,CAGDF,MAAD,IAAY;AAChB,YAAIA,MAAM,CAAC,CAAD,CAAN,CAAUiD,WAAV,OAA4BjD,MAAM,CAAC,CAAD,CAAN,CAAUiD,WAAV,EAAhC,EAAyD;AACrDxC,UAAAA,MAAM,CAACqC,kBAAP,CAA0B,uBAA1B,EAAmD,aAAnD,EAAkElB,WAAlE;AACH;;AACD,eAAO5B,MAAM,CAAC,CAAD,CAAb;AACH,OARS,CAAV;AASH;;AACD,WAAO6B,EAAP;AACH,GAvGe,CAwGhB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,EAAAA,mBAAmB,CAACL,WAAD,EAAc;AAC7B,WAAO3C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM4C,EAAE,GAAG,MAAMxB,iBAAiB,CAAC,KAAKyB,gBAAL,CAAsBF,WAAtB,CAAD,CAAlC;;AACA,UAAIC,EAAE,CAACqB,EAAH,IAAS,IAAb,EAAmB;AACfrB,QAAAA,EAAE,CAACqB,EAAH,GAAQzD,OAAO,CAACD,OAAR,CAAgBqC,EAAE,CAACqB,EAAnB,EAAuBhD,IAAvB,CAA6BgD,EAAD,IAAQjE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AACrF,cAAIiE,EAAE,IAAI,IAAV,EAAgB;AACZ,mBAAO,IAAP;AACH;;AACD,gBAAMC,OAAO,GAAG,MAAM,KAAKT,WAAL,CAAiBQ,EAAjB,CAAtB;;AACA,cAAIC,OAAO,IAAI,IAAf,EAAqB;AACjB1C,YAAAA,MAAM,CAACqC,kBAAP,CAA0B,oCAA1B,EAAgE,OAAhE,EAAyEI,EAAzE;AACH;;AACD,iBAAOC,OAAP;AACH,SAToD,CAA7C,CAAR,CADe,CAWf;;AACAtB,QAAAA,EAAE,CAACqB,EAAH,CAAME,KAAN,CAAaC,KAAD,IAAW,CAAG,CAA1B;AACH,OAf+C,CAgBhD;;;AACA,YAAMC,UAAU,GAAIzB,EAAE,CAAC0B,YAAH,IAAmB,IAAnB,IAA2B1B,EAAE,CAAC2B,oBAAH,IAA2B,IAA1E;;AACA,UAAI3B,EAAE,CAAC4B,QAAH,IAAe,IAAf,KAAwB5B,EAAE,CAAC6B,IAAH,KAAY,CAAZ,IAAiBJ,UAAzC,CAAJ,EAA0D;AACtD7C,QAAAA,MAAM,CAACqC,kBAAP,CAA0B,8CAA1B,EAA0E,aAA1E,EAAyFlB,WAAzF;AACH,OAFD,MAGK,IAAI,CAACC,EAAE,CAAC6B,IAAH,KAAY,CAAZ,IAAiB7B,EAAE,CAAC6B,IAAH,KAAY,CAA9B,KAAoCJ,UAAxC,EAAoD;AACrD7C,QAAAA,MAAM,CAACqC,kBAAP,CAA0B,2EAA1B,EAAuG,aAAvG,EAAsHlB,WAAtH;AACH;;AACD,UAAI,CAACC,EAAE,CAAC6B,IAAH,KAAY,CAAZ,IAAiB7B,EAAE,CAAC6B,IAAH,IAAW,IAA7B,KAAuC7B,EAAE,CAAC0B,YAAH,IAAmB,IAAnB,IAA2B1B,EAAE,CAAC2B,oBAAH,IAA2B,IAAjG,EAAwG;AACpG;AACA3B,QAAAA,EAAE,CAAC6B,IAAH,GAAU,CAAV;AACH,OAHD,MAIK,IAAI7B,EAAE,CAAC6B,IAAH,KAAY,CAAZ,IAAiB7B,EAAE,CAAC6B,IAAH,KAAY,CAAjC,EAAoC;AACrC;AACA;AACA,YAAI7B,EAAE,CAAC4B,QAAH,IAAe,IAAnB,EAAyB;AACrB5B,UAAAA,EAAE,CAAC4B,QAAH,GAAc,KAAKjB,WAAL,EAAd;AACH;AACJ,OANI,MAOA;AACD;AACA,cAAMmB,OAAO,GAAG,MAAM,KAAKlB,UAAL,EAAtB;;AACA,YAAIZ,EAAE,CAAC6B,IAAH,IAAW,IAAf,EAAqB;AACjB;AACA,cAAIC,OAAO,CAACJ,YAAR,IAAwB,IAAxB,IAAgCI,OAAO,CAACH,oBAAR,IAAgC,IAApE,EAA0E;AACtE;AACA;AACA3B,YAAAA,EAAE,CAAC6B,IAAH,GAAU,CAAV;;AACA,gBAAI7B,EAAE,CAAC4B,QAAH,IAAe,IAAnB,EAAyB;AACrB;AACA;AACA,oBAAMA,QAAQ,GAAG5B,EAAE,CAAC4B,QAApB;AACA,qBAAO5B,EAAE,CAAC4B,QAAV;AACA5B,cAAAA,EAAE,CAAC0B,YAAH,GAAkBE,QAAlB;AACA5B,cAAAA,EAAE,CAAC2B,oBAAH,GAA0BC,QAA1B;AACH,aAPD,MAQK;AACD;AACA,kBAAI5B,EAAE,CAAC0B,YAAH,IAAmB,IAAvB,EAA6B;AACzB1B,gBAAAA,EAAE,CAAC0B,YAAH,GAAkBI,OAAO,CAACJ,YAA1B;AACH;;AACD,kBAAI1B,EAAE,CAAC2B,oBAAH,IAA2B,IAA/B,EAAqC;AACjC3B,gBAAAA,EAAE,CAAC2B,oBAAH,GAA0BG,OAAO,CAACH,oBAAlC;AACH;AACJ;AACJ,WArBD,MAsBK,IAAIG,OAAO,CAACF,QAAR,IAAoB,IAAxB,EAA8B;AAC/B;AACA;AACA,gBAAIH,UAAJ,EAAgB;AACZ7C,cAAAA,MAAM,CAACmD,UAAP,CAAkB,mCAAlB,EAAuDrD,MAAM,CAACK,MAAP,CAAciD,qBAArE,EAA4F;AACxFC,gBAAAA,SAAS,EAAE;AAD6E,eAA5F;AAGH,aAP8B,CAQ/B;;;AACA,gBAAIjC,EAAE,CAAC4B,QAAH,IAAe,IAAnB,EAAyB;AACrB5B,cAAAA,EAAE,CAAC4B,QAAH,GAAcE,OAAO,CAACF,QAAtB;AACH,aAX8B,CAY/B;;;AACA5B,YAAAA,EAAE,CAAC6B,IAAH,GAAU,CAAV;AACH,WAdI,MAeA;AACD;AACAjD,YAAAA,MAAM,CAACmD,UAAP,CAAkB,mCAAlB,EAAuDrD,MAAM,CAACK,MAAP,CAAciD,qBAArE,EAA4F;AACxFC,cAAAA,SAAS,EAAE;AAD6E,aAA5F;AAGH;AACJ,SA7CD,MA8CK,IAAIjC,EAAE,CAAC6B,IAAH,KAAY,CAAhB,EAAmB;AACpB;AACA;AACA,cAAI7B,EAAE,CAAC0B,YAAH,IAAmB,IAAvB,EAA6B;AACzB1B,YAAAA,EAAE,CAAC0B,YAAH,GAAkBI,OAAO,CAACJ,YAA1B;AACH;;AACD,cAAI1B,EAAE,CAAC2B,oBAAH,IAA2B,IAA/B,EAAqC;AACjC3B,YAAAA,EAAE,CAAC2B,oBAAH,GAA0BG,OAAO,CAACH,oBAAlC;AACH;AACJ;AACJ;;AACD,UAAI3B,EAAE,CAACkC,KAAH,IAAY,IAAhB,EAAsB;AAClBlC,QAAAA,EAAE,CAACkC,KAAH,GAAW,KAAKrC,mBAAL,CAAyB,SAAzB,CAAX;AACH;;AACD,UAAIG,EAAE,CAACmC,QAAH,IAAe,IAAnB,EAAyB;AACrBnC,QAAAA,EAAE,CAACmC,QAAH,GAAc,KAAKrC,WAAL,CAAiBE,EAAjB,EAAqBuB,KAArB,CAA4BC,KAAD,IAAW;AAChD,cAAI1C,aAAa,CAACkC,OAAd,CAAsBQ,KAAK,CAACY,IAA5B,KAAqC,CAAzC,EAA4C;AACxC,kBAAMZ,KAAN;AACH;;AACD,iBAAO5C,MAAM,CAACmD,UAAP,CAAkB,2EAAlB,EAA+FrD,MAAM,CAACK,MAAP,CAAcsD,uBAA7G,EAAsI;AACzIb,YAAAA,KAAK,EAAEA,KADkI;AAEzIxB,YAAAA,EAAE,EAAEA;AAFqI,WAAtI,CAAP;AAIH,SARa,CAAd;AASH;;AACD,UAAIA,EAAE,CAACU,OAAH,IAAc,IAAlB,EAAwB;AACpBV,QAAAA,EAAE,CAACU,OAAH,GAAa,KAAKH,UAAL,EAAb;AACH,OAFD,MAGK;AACDP,QAAAA,EAAE,CAACU,OAAH,GAAa9C,OAAO,CAACuD,GAAR,CAAY,CACrBvD,OAAO,CAACD,OAAR,CAAgBqC,EAAE,CAACU,OAAnB,CADqB,EAErB,KAAKH,UAAL,EAFqB,CAAZ,EAGVlC,IAHU,CAGJiE,OAAD,IAAa;AACjB,cAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,CAAf,IAAoBA,OAAO,CAAC,CAAD,CAAP,KAAeA,OAAO,CAAC,CAAD,CAA9C,EAAmD;AAC/C1D,YAAAA,MAAM,CAACqC,kBAAP,CAA0B,0BAA1B,EAAsD,aAAtD,EAAqElB,WAArE;AACH;;AACD,iBAAOuC,OAAO,CAAC,CAAD,CAAd;AACH,SARY,CAAb;AASH;;AACD,aAAO,MAAM9D,iBAAiB,CAACwB,EAAD,CAA9B;AACH,KA5He,CAAhB;AA6HH,GA7Oe,CA8OhB;AACA;;;AACAN,EAAAA,cAAc,CAACuC,SAAD,EAAY;AACtB,QAAI,CAAC,KAAKtC,QAAV,EAAoB;AAChBf,MAAAA,MAAM,CAACmD,UAAP,CAAkB,kBAAlB,EAAsCrD,MAAM,CAACK,MAAP,CAAciD,qBAApD,EAA2E;AACvEC,QAAAA,SAAS,EAAGA,SAAS,IAAI;AAD8C,OAA3E;AAGH;AACJ;;AACc,SAARM,QAAQ,CAAC7E,KAAD,EAAQ;AACnB,WAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAAC8E,SAAjB,CAAR;AACH;;AAzPe;AA2PpB,OAAO,MAAMC,UAAN,SAAyBtD,MAAzB,CAAgC;AACnCC,EAAAA,WAAW,CAACkC,OAAD,EAAU3B,QAAV,EAAoB;AAC3B;AACApB,IAAAA,cAAc,CAAC,IAAD,EAAO,SAAP,EAAkB+C,OAAlB,CAAd;AACA/C,IAAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmBoB,QAAQ,IAAI,IAA/B,CAAd;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,WAAOhC,OAAO,CAACD,OAAR,CAAgB,KAAK2D,OAArB,CAAP;AACH;;AACDoB,EAAAA,KAAK,CAACC,OAAD,EAAUV,SAAV,EAAqB;AACtB,WAAOrE,OAAO,CAACD,OAAR,GAAkBU,IAAlB,CAAuB,MAAM;AAChCO,MAAAA,MAAM,CAACmD,UAAP,CAAkBY,OAAlB,EAA2BjE,MAAM,CAACK,MAAP,CAAciD,qBAAzC,EAAgE;AAAEC,QAAAA,SAAS,EAAEA;AAAb,OAAhE;AACH,KAFM,CAAP;AAGH;;AACDW,EAAAA,WAAW,CAACD,OAAD,EAAU;AACjB,WAAO,KAAKD,KAAL,CAAW,iCAAX,EAA8C,aAA9C,CAAP;AACH;;AACDpC,EAAAA,eAAe,CAACP,WAAD,EAAc;AACzB,WAAO,KAAK2C,KAAL,CAAW,qCAAX,EAAkD,iBAAlD,CAAP;AACH;;AACDG,EAAAA,cAAc,CAACC,MAAD,EAASC,KAAT,EAAgBrF,KAAhB,EAAuB;AACjC,WAAO,KAAKgF,KAAL,CAAW,mCAAX,EAAgD,eAAhD,CAAP;AACH;;AACDM,EAAAA,OAAO,CAACrD,QAAD,EAAW;AACd,WAAO,IAAI8C,UAAJ,CAAe,KAAKnB,OAApB,EAA6B3B,QAA7B,CAAP;AACH;;AAzBkC","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n;\n;\nexport class Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error) => { });\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            }\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            }\n            else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            }\n            else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        }\n                        else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    }\n                    else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    }\n                    else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                }\n                else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nexport class VoidSigner extends Signer {\n    constructor(address, provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}