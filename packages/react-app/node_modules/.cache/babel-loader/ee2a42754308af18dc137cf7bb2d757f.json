{"ast":null,"code":"import { BlockCipher } from './cipher-core.js';\n\n// Lookup tables\nconst _SBOX = [];\nconst INV_SBOX = [];\nconst _SUB_MIX_0 = [];\nconst _SUB_MIX_1 = [];\nconst _SUB_MIX_2 = [];\nconst _SUB_MIX_3 = [];\nconst INV_SUB_MIX_0 = [];\nconst INV_SUB_MIX_1 = [];\nconst INV_SUB_MIX_2 = [];\nconst INV_SUB_MIX_3 = [];\n\n// Compute lookup tables\n\n// Compute double table\nconst d = [];\nfor (let i = 0; i < 256; i += 1) {\n  if (i < 128) {\n    d[i] = i << 1;\n  } else {\n    d[i] = i << 1 ^ 0x11b;\n  }\n}\n\n// Walk GF(2^8)\nlet x = 0;\nlet xi = 0;\nfor (let i = 0; i < 256; i += 1) {\n  // Compute sbox\n  let sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n  sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n  _SBOX[x] = sx;\n  INV_SBOX[sx] = x;\n\n  // Compute multiplication\n  const x2 = d[x];\n  const x4 = d[x2];\n  const x8 = d[x4];\n\n  // Compute sub bytes, mix columns tables\n  let t = d[sx] * 0x101 ^ sx * 0x1010100;\n  _SUB_MIX_0[x] = t << 24 | t >>> 8;\n  _SUB_MIX_1[x] = t << 16 | t >>> 16;\n  _SUB_MIX_2[x] = t << 8 | t >>> 24;\n  _SUB_MIX_3[x] = t;\n\n  // Compute inv sub bytes, inv mix columns tables\n  t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n  INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n  INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n  INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n  INV_SUB_MIX_3[sx] = t;\n\n  // Compute next counter\n  if (!x) {\n    xi = 1;\n    x = xi;\n  } else {\n    x = x2 ^ d[d[d[x8 ^ x2]]];\n    xi ^= d[d[xi]];\n  }\n}\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n/**\n * AES block cipher algorithm.\n */\nexport class AESAlgo extends BlockCipher {\n  _doReset() {\n    let t;\n\n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n\n    // Shortcuts\n    this._keyPriorReset = this._key;\n    const key = this._keyPriorReset;\n    const keyWords = key.words;\n    const keySize = key.sigBytes / 4;\n\n    // Compute number of rounds\n    this._nRounds = keySize + 6;\n    const nRounds = this._nRounds;\n\n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n\n    // Compute key schedule\n    this._keySchedule = [];\n    const keySchedule = this._keySchedule;\n    for (let ksRow = 0; ksRow < ksRows; ksRow += 1) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      } else {\n        t = keySchedule[ksRow - 1];\n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = t << 8 | t >>> 24;\n\n          // Sub word\n          t = _SBOX[t >>> 24] << 24 | _SBOX[t >>> 16 & 0xff] << 16 | _SBOX[t >>> 8 & 0xff] << 8 | _SBOX[t & 0xff];\n\n          // Mix Rcon\n          t ^= RCON[ksRow / keySize | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = _SBOX[t >>> 24] << 24 | _SBOX[t >>> 16 & 0xff] << 16 | _SBOX[t >>> 8 & 0xff] << 8 | _SBOX[t & 0xff];\n        }\n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n\n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    const invKeySchedule = this._invKeySchedule;\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow += 1) {\n      const ksRow = ksRows - invKsRow;\n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = INV_SUB_MIX_0[_SBOX[t >>> 24]] ^ INV_SUB_MIX_1[_SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[_SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[_SBOX[t & 0xff]];\n      }\n    }\n  }\n  encryptBlock(M, offset) {\n    this._doCryptBlock(M, offset, this._keySchedule, _SUB_MIX_0, _SUB_MIX_1, _SUB_MIX_2, _SUB_MIX_3, _SBOX);\n  }\n  decryptBlock(M, offset) {\n    const _M = M;\n\n    // Swap 2nd and 4th rows\n    let t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n    this._doCryptBlock(_M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n    // Inv swap 2nd and 4th rows\n    t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n  }\n  _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n    const _M = M;\n\n    // Shortcut\n    const nRounds = this._nRounds;\n\n    // Get input, add round key\n    let s0 = _M[offset] ^ keySchedule[0];\n    let s1 = _M[offset + 1] ^ keySchedule[1];\n    let s2 = _M[offset + 2] ^ keySchedule[2];\n    let s3 = _M[offset + 3] ^ keySchedule[3];\n\n    // Key schedule row counter\n    let ksRow = 4;\n\n    // Rounds\n    for (let round = 1; round < nRounds; round += 1) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow];\n      ksRow += 1;\n\n      // Update state\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    }\n\n    // Shift rows, sub bytes, add round key\n    const t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow];\n    ksRow += 1;\n\n    // Set output\n    _M[offset] = t0;\n    _M[offset + 1] = t1;\n    _M[offset + 2] = t2;\n    _M[offset + 3] = t3;\n  }\n}\nAESAlgo.keySize = 256 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n */\nexport const AES = BlockCipher._createHelper(AESAlgo);","map":{"version":3,"names":["BlockCipher","_SBOX","INV_SBOX","_SUB_MIX_0","_SUB_MIX_1","_SUB_MIX_2","_SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","d","i","x","xi","sx","x2","x4","x8","t","RCON","AESAlgo","_doReset","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","sigBytes","nRounds","ksRows","_keySchedule","keySchedule","ksRow","_invKeySchedule","invKeySchedule","invKsRow","encryptBlock","M","offset","_doCryptBlock","decryptBlock","_M","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","SBOX","s0","s1","s2","s3","round","t0","t1","t2","t3","AES","_createHelper"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc2/node_modules/crypto-es/lib/aes.js"],"sourcesContent":["import {\n  BlockCipher,\n} from './cipher-core.js';\n\n// Lookup tables\nconst _SBOX = [];\nconst INV_SBOX = [];\nconst _SUB_MIX_0 = [];\nconst _SUB_MIX_1 = [];\nconst _SUB_MIX_2 = [];\nconst _SUB_MIX_3 = [];\nconst INV_SUB_MIX_0 = [];\nconst INV_SUB_MIX_1 = [];\nconst INV_SUB_MIX_2 = [];\nconst INV_SUB_MIX_3 = [];\n\n// Compute lookup tables\n\n// Compute double table\nconst d = [];\nfor (let i = 0; i < 256; i += 1) {\n  if (i < 128) {\n    d[i] = i << 1;\n  } else {\n    d[i] = (i << 1) ^ 0x11b;\n  }\n}\n\n// Walk GF(2^8)\nlet x = 0;\nlet xi = 0;\nfor (let i = 0; i < 256; i += 1) {\n  // Compute sbox\n  let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n  sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n  _SBOX[x] = sx;\n  INV_SBOX[sx] = x;\n\n  // Compute multiplication\n  const x2 = d[x];\n  const x4 = d[x2];\n  const x8 = d[x4];\n\n  // Compute sub bytes, mix columns tables\n  let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n  _SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n  _SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n  _SUB_MIX_2[x] = (t << 8) | (t >>> 24);\n  _SUB_MIX_3[x] = t;\n\n  // Compute inv sub bytes, inv mix columns tables\n  t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n  INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n  INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n  INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n  INV_SUB_MIX_3[sx] = t;\n\n  // Compute next counter\n  if (!x) {\n    xi = 1;\n    x = xi;\n  } else {\n    x = x2 ^ d[d[d[x8 ^ x2]]];\n    xi ^= d[d[xi]];\n  }\n}\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n/**\n * AES block cipher algorithm.\n */\nexport class AESAlgo extends BlockCipher {\n  _doReset() {\n    let t;\n\n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n\n    // Shortcuts\n    this._keyPriorReset = this._key;\n    const key = this._keyPriorReset;\n    const keyWords = key.words;\n    const keySize = key.sigBytes / 4;\n\n    // Compute number of rounds\n    this._nRounds = keySize + 6;\n    const nRounds = this._nRounds;\n\n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n\n    // Compute key schedule\n    this._keySchedule = [];\n    const keySchedule = this._keySchedule;\n    for (let ksRow = 0; ksRow < ksRows; ksRow += 1) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      } else {\n        t = keySchedule[ksRow - 1];\n\n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = (t << 8) | (t >>> 24);\n\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n\n          // Mix Rcon\n          t ^= RCON[(ksRow / keySize) | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n        }\n\n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n\n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    const invKeySchedule = this._invKeySchedule;\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow += 1) {\n      const ksRow = ksRows - invKsRow;\n\n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = INV_SUB_MIX_0[_SBOX[t >>> 24]]\n          ^ INV_SUB_MIX_1[_SBOX[(t >>> 16) & 0xff]]\n          ^ INV_SUB_MIX_2[_SBOX[(t >>> 8) & 0xff]]\n          ^ INV_SUB_MIX_3[_SBOX[t & 0xff]];\n      }\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(\n      M, offset, this._keySchedule, _SUB_MIX_0, _SUB_MIX_1, _SUB_MIX_2, _SUB_MIX_3, _SBOX,\n    );\n  }\n\n  decryptBlock(M, offset) {\n    const _M = M;\n\n    // Swap 2nd and 4th rows\n    let t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n\n    this._doCryptBlock(\n      _M,\n      offset,\n      this._invKeySchedule,\n      INV_SUB_MIX_0,\n      INV_SUB_MIX_1,\n      INV_SUB_MIX_2,\n      INV_SUB_MIX_3,\n      INV_SBOX,\n    );\n\n    // Inv swap 2nd and 4th rows\n    t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n  }\n\n  _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n    const _M = M;\n\n    // Shortcut\n    const nRounds = this._nRounds;\n\n    // Get input, add round key\n    let s0 = _M[offset] ^ keySchedule[0];\n    let s1 = _M[offset + 1] ^ keySchedule[1];\n    let s2 = _M[offset + 2] ^ keySchedule[2];\n    let s3 = _M[offset + 3] ^ keySchedule[3];\n\n    // Key schedule row counter\n    let ksRow = 4;\n\n    // Rounds\n    for (let round = 1; round < nRounds; round += 1) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const t0 = SUB_MIX_0[s0 >>> 24]\n        ^ SUB_MIX_1[(s1 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s2 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s3 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t1 = SUB_MIX_0[s1 >>> 24]\n        ^ SUB_MIX_1[(s2 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s3 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s0 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t2 = SUB_MIX_0[s2 >>> 24]\n        ^ SUB_MIX_1[(s3 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s0 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s1 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t3 = SUB_MIX_0[s3 >>> 24]\n        ^ SUB_MIX_1[(s0 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s1 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s2 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n\n      // Update state\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    }\n\n    // Shift rows, sub bytes, add round key\n    const t0 = (\n      (SBOX[s0 >>> 24] << 24)\n        | (SBOX[(s1 >>> 16) & 0xff] << 16)\n        | (SBOX[(s2 >>> 8) & 0xff] << 8)\n        | SBOX[s3 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t1 = (\n      (SBOX[s1 >>> 24] << 24)\n        | (SBOX[(s2 >>> 16) & 0xff] << 16)\n        | (SBOX[(s3 >>> 8) & 0xff] << 8)\n        | SBOX[s0 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t2 = (\n      (SBOX[s2 >>> 24] << 24)\n        | (SBOX[(s3 >>> 16) & 0xff] << 16)\n        | (SBOX[(s0 >>> 8) & 0xff] << 8)\n        | SBOX[s1 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t3 = (\n      (SBOX[s3 >>> 24] << 24)\n        | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n\n    // Set output\n    _M[offset] = t0;\n    _M[offset + 1] = t1;\n    _M[offset + 2] = t2;\n    _M[offset + 3] = t3;\n  }\n}\nAESAlgo.keySize = 256 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n */\nexport const AES = BlockCipher._createHelper(AESAlgo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}