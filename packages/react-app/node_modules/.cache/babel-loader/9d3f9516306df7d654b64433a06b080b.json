{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n\n      try {\n        const provider = new providers.PocketProvider(network, options.pocket);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providers.AnkrProvider && options.ankr !== \"-\") {\n      try {\n        const skip = [\"ropsten\"];\n        const provider = new providers.AnkrProvider(network, options.ankr);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: \"sepolia\",\n    _defaultProvider: ethDefaultProvider(\"sepolia\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\",\n    _defaultProvider: ethDefaultProvider(\"matic\")\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\",\n    _defaultProvider: ethDefaultProvider(\"optimism\")\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  \"arbitrum-goerli\": {\n    chainId: 421613,\n    name: \"arbitrum-goerli\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/@ethersproject/networks/lib.esm/index.js"],"names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","skip","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}