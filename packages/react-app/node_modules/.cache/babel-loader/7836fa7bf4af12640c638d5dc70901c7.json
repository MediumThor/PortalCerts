{"ast":null,"code":"/**\n * Counter block mode.\n */\nimport { BlockCipherMode } from './cipher-core.js';\nexport class CTR extends BlockCipherMode {}\nCTR.Encryptor = class extends CTR {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const {\n      blockSize\n    } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Increment counter\n    counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTR.Decryptor = CTR.Encryptor;","map":{"version":3,"names":["BlockCipherMode","CTR","Encryptor","processBlock","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/node_modules/crypto-es/lib/mode-ctr.js"],"sourcesContent":["/**\n * Counter block mode.\n */\nimport {\n  BlockCipherMode,\n} from './cipher-core.js';\n\nexport class CTR extends BlockCipherMode {\n}\nCTR.Encryptor = class extends CTR {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Increment counter\n    counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTR.Decryptor = CTR.Encryptor;\n"],"mappings":"AAAA;AACA;AACA;AACA,SACEA,eAAe,QACV,kBAAkB;AAEzB,OAAO,MAAMC,GAAG,SAASD,eAAe,CAAC;AAEzCC,GAAG,CAACC,SAAS,GAAG,cAAcD,GAAG,CAAC;EAChCE,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC1B,MAAMC,MAAM,GAAGF,KAAK;;IAEpB;IACA,MAAMG,MAAM,GAAG,IAAI,CAACC,OAAO;IAC3B,MAAM;MAAEC;IAAU,CAAC,GAAGF,MAAM;IAC5B,MAAMG,EAAE,GAAG,IAAI,CAACC,GAAG;IACnB,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ;;IAE3B;IACA,IAAIH,EAAE,EAAE;MACN,IAAI,CAACG,QAAQ,GAAGH,EAAE,CAACI,KAAK,CAAC,CAAC,CAAC;MAC3BF,OAAO,GAAG,IAAI,CAACC,QAAQ;;MAEvB;MACA,IAAI,CAACF,GAAG,GAAGI,SAAS;IACtB;IACA,MAAMC,SAAS,GAAGJ,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC;IAClCP,MAAM,CAACU,YAAY,CAACD,SAAS,EAAE,CAAC,CAAC;;IAEjC;IACAJ,OAAO,CAACH,SAAS,GAAG,CAAC,CAAC,GAAIG,OAAO,CAACH,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAI,CAAC;;IAEzD;IACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,SAAS,EAAES,CAAC,IAAI,CAAC,EAAE;MACrCZ,MAAM,CAACD,MAAM,GAAGa,CAAC,CAAC,IAAIF,SAAS,CAACE,CAAC,CAAC;IACpC;EACF;AACF,CAAC;AACDjB,GAAG,CAACkB,SAAS,GAAGlB,GAAG,CAACC,SAAS"},"metadata":{},"sourceType":"module"}