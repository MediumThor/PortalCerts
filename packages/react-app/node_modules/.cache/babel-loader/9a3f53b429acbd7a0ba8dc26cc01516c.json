{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { Account } from \"./components\";\nimport IntroPage from './components/IntroPage.js';\nimport StatsPage from './components/StatsPage.js';\nimport { usePoller } from \"./hooks\";\nimport Transactor from \"./helpers/Transactor.js\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'; // Artifacts\n\nimport ACJSON from \"./contracts/AnchorCertificates.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /* Universal State*/\n  const [address, setAddress] = useState();\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [minting, setMinting] = useState(false); // whether something is minting or not\n  // chain ids (used as proxy for being connect to a provider)\n\n  const [tokenId, setTokenId] = useState(0); // token Id to display\n\n  const [injectedChainId, setInjectedChainId] = useState(null);\n  const [hardcodedChainId, setHardcodedChainId] = useState(null); // set it manually\n\n  let ACAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // mainnet\n\n  let dfPrice = \"0.01\"; // ~$20 @ 2000/ETH\n\n  let dxPrice = \"0.05\"; // ~$100 @ 2000/ETH\n\n  const [ACSigner, setACSigner] = useState(null); // NOTE: Currently not being used in Transactor, but keeping it in the code in case I want to turn it back on.\n  // Currently, it's expected that the web3 provider sets it (eg, MetaMask fills it in).\n  // const gasPrice = useGasPrice(\"fast\"); \n\n  const gasPrice = 0;\n  usePoller(() => {\n    pollInjectedProvider();\n  }, 1999);\n\n  async function pollInjectedProvider() {\n    if (!injectedChainId) {\n      if (injectedProvider && injectedProvider.network) {\n        const id = await injectedProvider.network.chainId;\n        setInjectedChainId(id); // comment out line for local or prod\n\n        setHardcodedChainId(1); // mainnet\n        // setHardcodedChainId(4); // rinkeby\n        // setHardcodedChainId(id); // local (uses injectedProvider)\n      }\n    }\n  } // load signers if there's an injected provider\n\n\n  useEffect(() => {\n    async function loadSigners() {\n      if (injectedChainId !== null) {\n        const signer = await injectedProvider.getSigner();\n        const ACSigner = new ethers.Contract(ACAddress, ACJSON.abi, signer);\n        setACSigner(ACSigner);\n      }\n    }\n\n    loadSigners();\n  }, [injectedChainId]);\n\n  async function mintAnchorCertificate(type) {\n    let val;\n\n    if (type === \"default\") {\n      val = ethers.utils.parseEther(dfPrice);\n    }\n\n    if (type === \"deluxe\") {\n      val = ethers.utils.parseEther(dxPrice);\n    }\n\n    const tx = Transactor(injectedProvider, gasPrice);\n    setMinting(true);\n    tx(ACSigner.functions.mintCertificate({\n      value: val\n    }), async function (update) {\n      /*Used for testing UI*/\n      // await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(update);\n      console.log(update.eventCode);\n\n      if (update.eventCode === \"txConfirmed\" || update.confirmations === 1) {\n        const txResponse = await injectedProvider.getTransaction(update.hash);\n        console.log(txResponse);\n        const receipt = await txResponse.wait();\n        console.log(receipt);\n        const tokenId = receipt.logs[0].topics[3];\n        setTokenId(tokenId);\n        setMinting(false);\n      }\n      /* if user denies tx */\n\n\n      if (update.code !== undefined) {\n        if (update.code === 4001) {\n          setMinting(false);\n        }\n      }\n    });\n  } // mainnet\n\n\n  const graphURI = 'https://api.thegraph.com/subgraphs/name/simondlr/tlatc'; // const graphURI = 'http://localhost:8000/subgraphs/name/simondlr/neolastics-subgraph';\n\n  const client = new ApolloClient({\n    uri: graphURI,\n    cache: new InMemoryCache()\n  });\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Account, {\n        address: address,\n        setAddress: setAddress,\n        injectedProvider: injectedProvider,\n        setInjectedProvider: setInjectedProvider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(IntroPage, {\n            address: address,\n            ACSigner: ACSigner,\n            injectedChainId: injectedChainId,\n            hardcodedChainId: hardcodedChainId,\n            mintAnchorCertificate: mintAnchorCertificate,\n            tokenId: tokenId,\n            minting: minting,\n            dfPrice: dfPrice,\n            dxPrice: dxPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/stats\",\n          children: /*#__PURE__*/_jsxDEV(StatsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"DLmYcnPjbWDgaASVTgBfNPZoQyA=\", false, function () {\n  return [usePoller];\n});\n\n_c = App;\n\nclass AppRoutes extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:page\",\n          children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AppRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/App.js"],"names":["React","useState","useEffect","Component","BrowserRouter","Router","Route","Switch","ethers","Account","IntroPage","StatsPage","usePoller","Transactor","ApolloClient","ApolloProvider","InMemoryCache","ACJSON","App","address","setAddress","injectedProvider","setInjectedProvider","minting","setMinting","tokenId","setTokenId","injectedChainId","setInjectedChainId","hardcodedChainId","setHardcodedChainId","ACAddress","dfPrice","dxPrice","ACSigner","setACSigner","gasPrice","pollInjectedProvider","network","id","chainId","loadSigners","signer","getSigner","Contract","abi","mintAnchorCertificate","type","val","utils","parseEther","tx","functions","mintCertificate","value","update","console","log","eventCode","confirmations","txResponse","getTransaction","hash","receipt","wait","logs","topics","code","undefined","graphURI","client","uri","cache","AppRoutes","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { Account } from \"./components\"\n\nimport IntroPage from './components/IntroPage.js';\nimport StatsPage from './components/StatsPage.js';\n\nimport { usePoller } from \"./hooks\";\n\nimport Transactor from \"./helpers/Transactor.js\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\n// Artifacts\nimport ACJSON from \"./contracts/AnchorCertificates.json\";\n\nfunction App() {\n  /* Universal State*/\n  const [address, setAddress] = useState();\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [minting, setMinting] = useState(false); // whether something is minting or not\n\n  // chain ids (used as proxy for being connect to a provider)\n  const [tokenId, setTokenId] = useState(0); // token Id to display\n  const [injectedChainId, setInjectedChainId] = useState(null);\n  const [hardcodedChainId, setHardcodedChainId] = useState(null); // set it manually\n\n  let ACAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // mainnet\n\n  let dfPrice = \"0.01\"; // ~$20 @ 2000/ETH\n  let dxPrice = \"0.05\"; // ~$100 @ 2000/ETH\n\n  const [ACSigner, setACSigner] = useState(null);\n\n  // NOTE: Currently not being used in Transactor, but keeping it in the code in case I want to turn it back on.\n  // Currently, it's expected that the web3 provider sets it (eg, MetaMask fills it in).\n  // const gasPrice = useGasPrice(\"fast\"); \n  const gasPrice = 0;\n\n  usePoller(() => { pollInjectedProvider() }, 1999);\n\n  async function pollInjectedProvider() {\n    if (!injectedChainId) {\n      if (injectedProvider && injectedProvider.network) {\n        const id = await injectedProvider.network.chainId;\n        setInjectedChainId(id);\n\n        // comment out line for local or prod\n        setHardcodedChainId(1); // mainnet\n        // setHardcodedChainId(4); // rinkeby\n        // setHardcodedChainId(id); // local (uses injectedProvider)\n\n      }\n    }\n  }\n\n  // load signers if there's an injected provider\n  useEffect(() => {\n    async function loadSigners() {\n      if (injectedChainId !== null) {\n        const signer = await injectedProvider.getSigner();\n        const ACSigner = new ethers.Contract(ACAddress, ACJSON.abi, signer);\n        setACSigner(ACSigner);\n      }\n    }\n    loadSigners();\n  }, [injectedChainId]);\n\n\n  async function mintAnchorCertificate(type) {\n    let val;\n    if (type === \"default\") { val = ethers.utils.parseEther(dfPrice); }\n    if (type === \"deluxe\") { val = ethers.utils.parseEther(dxPrice); }\n    const tx = Transactor(injectedProvider, gasPrice);\n    setMinting(true);\n    tx(ACSigner.functions.mintCertificate({ value: val }), async function (update) {\n      /*Used for testing UI*/\n      // await new Promise(resolve => setTimeout(resolve, 5000));\n      console.log(update);\n      console.log(update.eventCode);\n      if (update.eventCode === \"txConfirmed\" || update.confirmations === 1) {\n        const txResponse = await injectedProvider.getTransaction(update.hash);\n        console.log(txResponse);\n        const receipt = await txResponse.wait();\n        console.log(receipt);\n        const tokenId = receipt.logs[0].topics[3];\n        setTokenId(tokenId);\n        setMinting(false);\n      }\n\n      /* if user denies tx */\n      if (update.code !== undefined) {\n        if (update.code === 4001) {\n          setMinting(false);\n        }\n      }\n    });\n  }\n\n  // mainnet\n  const graphURI = 'https://api.thegraph.com/subgraphs/name/simondlr/tlatc';\n  // const graphURI = 'http://localhost:8000/subgraphs/name/simondlr/neolastics-subgraph';\n\n  const client = new ApolloClient({\n    uri: graphURI,\n    cache: new InMemoryCache(),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Account\n          address={address}\n          setAddress={setAddress}\n          injectedProvider={injectedProvider}\n          setInjectedProvider={setInjectedProvider}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <IntroPage\n              address={address}\n              ACSigner={ACSigner}\n              injectedChainId={injectedChainId}\n              hardcodedChainId={hardcodedChainId}\n              mintAnchorCertificate={mintAnchorCertificate}\n              tokenId={tokenId}\n              minting={minting}\n              dfPrice={dfPrice}\n              dxPrice={dxPrice}\n            />\n          </Route>\n          <Route path=\"/stats\">\n            <StatsPage\n            />\n          </Route>\n        </Switch>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nclass AppRoutes extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/:page'>\n            <App />\n          </Route>\n          <Route exact path='/'>\n            <App />\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default AppRoutes;\n"]},"metadata":{},"sourceType":"module"}