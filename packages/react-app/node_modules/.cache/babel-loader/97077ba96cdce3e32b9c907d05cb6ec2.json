{"ast":null,"code":"import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport Notify from \"bnc-notify\"; // this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\n\nconst callbacks = {};\nconst DEBUG = true;\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: '8e383acf-9eee-422a-a01d-fa1baa1a29e0',\n        // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        }\n      };\n      const notify = Notify(options);\n      let etherscanNetwork = \"\";\n\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n\n        if (DEBUG) console.log(\"RESULT:\", result); // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        } // if it is a valid Notify.js network, use that, if not, just send a default notification\n\n\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const {\n            emitter\n          } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash)\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\"\n          }); // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult,\n                  ...currentTransactionReceipt\n                });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          console.log('waited');\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message\n        });\n\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n_c = Transactor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactor\");","map":{"version":3,"sources":["/Users/ryan/Desktop/Arcanum/NFTS/tlatc/packages/react-app/src/helpers/Transactor.js"],"names":["hexlify","parseUnits","notification","Notify","callbacks","DEBUG","Transactor","provider","gasPrice","etherscan","tx","callback","signer","getSigner","network","getNetwork","console","log","options","dappId","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","notify","etherscanNetwork","name","etherscanTxUrl","result","Promise","gasLimit","sendTransaction","indexOf","emitter","on","onclick","window","open","info","message","description","placement","txResult","listeningInterval","setInterval","currentTransactionReceipt","getTransactionReceipt","confirmations","clearInterval","wait","e","error"],"mappings":"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","sourcesContent":["import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true\n\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: '8e383acf-9eee-422a-a01d-fa1baa1a29e0', // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if(DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n      const notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if(DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n          if(DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if(DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          console.log('waited');\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}"]},"metadata":{},"sourceType":"module"}